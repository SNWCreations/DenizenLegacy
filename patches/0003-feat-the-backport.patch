From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?ZX=E5=A4=8F=E5=A4=9C=E4=B9=8B=E9=A3=8E?=
 <snwcreations@qq.com>
Date: Sun, 13 Oct 2024 15:41:30 +0800
Subject: [PATCH] feat: the backport


diff --git a/dist/pom.xml b/dist/pom.xml
index d8474d52e1bcadcac75e49e58707f0126c861d6d..928f2607faf89922c686841a05a98264b30d6216 100644
--- a/dist/pom.xml
+++ b/dist/pom.xml
@@ -181,7 +181,7 @@
                 <artifactId>maven-jar-plugin</artifactId>
                 <version>3.3.0</version>
                 <configuration>
-                    <finalName>Denizen-${DENIZEN_VERSION}-b${BUILD_NUMBER}-${BUILD_CLASS}</finalName>
+                    <finalName>Denizen-MC1.20.1-${DENIZEN_VERSION}-b${BUILD_NUMBER}-${BUILD_CLASS}</finalName> <!-- Backport - Mark the plugin as only supporting MC 1.20.1 -->
                     <outputDirectory>../target</outputDirectory>
                     <archive>
                         <manifest>
diff --git a/paper/src/main/java/com/denizenscript/denizen/paper/PaperModule.java b/paper/src/main/java/com/denizenscript/denizen/paper/PaperModule.java
index f47fd55f95fdcef95429c67115e8c9d51eaf83a9..7b77ed9acf265fdbbaff39cb0480bc5c08e86091 100644
--- a/paper/src/main/java/com/denizenscript/denizen/paper/PaperModule.java
+++ b/paper/src/main/java/com/denizenscript/denizen/paper/PaperModule.java
@@ -75,9 +75,13 @@ public class PaperModule {
         ScriptEvent.registerScriptEvent(PlayerSelectsStonecutterRecipeScriptEvent.class);
         ScriptEvent.registerScriptEvent(PlayerLecternPageChangeScriptEvent.class);
         ScriptEvent.registerScriptEvent(PlayerSpectatesEntityScriptEvent.class);
+        // Backport start - Newer API does not exist
+        /*
         if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_20)) {
             ScriptEvent.registerScriptEvent(PlayerShieldDisableScriptEvent.class);
         }
+        */
+        // Backport end
         ScriptEvent.registerScriptEvent(PlayerStopsSpectatingScriptEvent.class);
         if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_19)) {
             ScriptEvent.registerScriptEvent(PlayerTracksEntityScriptEvent.class);
diff --git a/paper/src/main/java/com/denizenscript/denizen/paper/events/PlayerShieldDisableScriptEvent.java b/paper/src/main/java/com/denizenscript/denizen/paper/events/PlayerShieldDisableScriptEvent.java.ignored
similarity index 100%
rename from paper/src/main/java/com/denizenscript/denizen/paper/events/PlayerShieldDisableScriptEvent.java
rename to paper/src/main/java/com/denizenscript/denizen/paper/events/PlayerShieldDisableScriptEvent.java.ignored
diff --git a/paper/src/main/java/com/denizenscript/denizen/paper/utilities/PaperAPIToolsImpl.java b/paper/src/main/java/com/denizenscript/denizen/paper/utilities/PaperAPIToolsImpl.java
index bccb44dc8abd86176b34652ade6394535c55455c..4399bcb8f62c71d4bac591cbee4393201ecc7056 100644
--- a/paper/src/main/java/com/denizenscript/denizen/paper/utilities/PaperAPIToolsImpl.java
+++ b/paper/src/main/java/com/denizenscript/denizen/paper/utilities/PaperAPIToolsImpl.java
@@ -199,10 +199,14 @@ public class PaperAPIToolsImpl extends PaperAPITools {
     }
 
     public static RecipeChoice parseBrewingRecipeChoice(ItemScriptContainer container, String choice, TagContext context) {
+        // Backport start - Newer MC methods do not exist
+        /*
         if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_20) && choice.startsWith("matcher:")) {
             String matcher = choice.substring("matcher:".length());
             return PotionMix.createPredicateChoice(item -> new ItemTag(item).tryAdvancedMatcher(matcher, context));
         }
+        */
+        // Backport end
         boolean exact = true;
         if (choice.startsWith("material:")) {
             choice = choice.substring("material:".length());
@@ -232,10 +236,14 @@ public class PaperAPIToolsImpl extends PaperAPITools {
         return potionMixes.get(recipeId).ingredientMatcher();
     }
 
+    // Backport start - Newer MC methods do not exist
+    /*
     @Override
     public RecipeChoice createPredicateRecipeChoice(Predicate<ItemStack> predicate) {
         return PotionMix.createPredicateChoice(predicate);
     }
+    */
+    // Backport end
 
     @Override
     public String getDeathMessage(PlayerDeathEvent event) {
@@ -381,8 +389,12 @@ public class PaperAPIToolsImpl extends PaperAPITools {
         return clientBrand != null ? clientBrand : "unknown";
     }
 
+    // Backport start - Newer API does not exist
+    /*
     @Override
     public boolean canUseEquipmentSlot(LivingEntity entity, EquipmentSlot slot) {
         return NMSHandler.getVersion().isAtLeast(NMSVersion.v1_20) ? entity.canUseEquipmentSlot(slot) : super.canUseEquipmentSlot(entity, slot);
     }
+    */
+    // Backport end
 }
diff --git a/plugin/src/main/java/com/denizenscript/denizen/nms/interfaces/BlockHelper.java b/plugin/src/main/java/com/denizenscript/denizen/nms/interfaces/BlockHelper.java
index 5d4ca461603babc0fef738ff68fbb584552dc28a..f5e69a7cb3f185d9fabaec718e306ecd79b7b054 100644
--- a/plugin/src/main/java/com/denizenscript/denizen/nms/interfaces/BlockHelper.java
+++ b/plugin/src/main/java/com/denizenscript/denizen/nms/interfaces/BlockHelper.java
@@ -88,9 +88,14 @@ public interface BlockHelper {
         spawner.setSpawnedType(entity.getBukkitEntityType());
     }
 
+    // Backport start - Newer API does not exist
+    /*
     default Color getMapColor(Block block) { // TODO: once 1.20 is the minimum supported version, remove from NMS
         return block.getBlockData().getMapColor();
     }
+    */
+    Color getMapColor(Block block);
+    // Backport end
 
     default void setVanillaTags(Material material, Set<String> tags) {
         throw new UnsupportedOperationException();
diff --git a/plugin/src/main/java/com/denizenscript/denizen/nms/interfaces/EntityHelper.java b/plugin/src/main/java/com/denizenscript/denizen/nms/interfaces/EntityHelper.java
index be2bc3b6060a2a5aa1ce50c061605722764a9b35..afbec0e8b5115e20691b086e35867c23d3011313 100644
--- a/plugin/src/main/java/com/denizenscript/denizen/nms/interfaces/EntityHelper.java
+++ b/plugin/src/main/java/com/denizenscript/denizen/nms/interfaces/EntityHelper.java
@@ -382,9 +382,14 @@ public abstract class EntityHelper {
 
     public abstract void setBoundingBox(Entity entity, BoundingBox box);
 
+    // Backport start - Newer API does not exist
+    /*
     public List<Player> getPlayersThatSee(Entity entity) { // TODO: once the minimum supported version is 1.20, remove from NMS
         return List.copyOf(entity.getTrackedBy());
     }
+    */
+    public abstract List<Player> getPlayersThatSee(Entity entity);
+    // Backport end
 
     public void sendAllUpdatePackets(Entity entity) {
         throw new UnsupportedOperationException();
@@ -446,13 +451,21 @@ public abstract class EntityHelper {
     }
 
     public float getStepHeight(Entity entity) {
-        return entity instanceof LivingEntity livingEntity ? (float) livingEntity.getAttribute(Attribute.GENERIC_STEP_HEIGHT).getBaseValue() : 0;
+        // Backport start - Step height attribute does not exist in MC 1.20.1
+//        return entity instanceof LivingEntity livingEntity ? (float) livingEntity.getAttribute(Attribute.GENERIC_STEP_HEIGHT).getBaseValue() : 0;
+        throw new UnsupportedOperationException();
+        // Backport end
     }
 
     public void setStepHeight(Entity entity, float stepHeight) {
+        // Backport start - Step height attribute does not exist in MC 1.20.1
+        /*
         if (entity instanceof LivingEntity livingEntity) {
             livingEntity.getAttribute(Attribute.GENERIC_STEP_HEIGHT).setBaseValue(stepHeight);
         }
+        */
+        throw new UnsupportedOperationException();
+        // Backport end
     }
 
     public List<Object> convertInternalEntityDataValues(Entity entity, MapTag internalData) {
@@ -483,7 +496,7 @@ public abstract class EntityHelper {
 
     public static class EntityEntersVehicleScriptEventImpl extends EntityEntersVehicleScriptEvent {
         @EventHandler
-        public void onEntityMount(EntityMountEvent event) {
+        public void onEntityMount(org.spigotmc.event.entity.EntityMountEvent event) { // Backport - EntityMountEvent was a Spigot event in MC 1.20.1
             fire(event, event.getMount());
         }
     }
@@ -494,7 +507,7 @@ public abstract class EntityHelper {
 
     public static class EntityExitsVehicleScriptEventImpl extends EntityExitsVehicleScriptEvent {
         @EventHandler
-        public void onEntityMount(EntityDismountEvent event) {
+        public void onEntityMount(org.spigotmc.event.entity.EntityDismountEvent event) { // Backport - EntityDismountEvent was a Spigot event in MC 1.20.1
             fire(event, event.getDismounted());
         }
     }
diff --git a/plugin/src/main/java/com/denizenscript/denizen/objects/properties/PropertyRegistry.java b/plugin/src/main/java/com/denizenscript/denizen/objects/properties/PropertyRegistry.java
index 529ea7aa35541b9c8af9f1b2ddbced68200e3f4a..f3ccbf92e46b78066a9e364affadfad0ac0bd663 100644
--- a/plugin/src/main/java/com/denizenscript/denizen/objects/properties/PropertyRegistry.java
+++ b/plugin/src/main/java/com/denizenscript/denizen/objects/properties/PropertyRegistry.java
@@ -168,9 +168,13 @@ public class PropertyRegistry {
         }
         PropertyParser.registerProperty(EntityStrength.class, EntityTag.class);
         PropertyParser.registerProperty(EntityTame.class, EntityTag.class);
+        // Backport start - Newer API does not exist
+        /*
         if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_20)) {
             PropertyParser.registerProperty(EntityTeleportDuration.class, EntityTag.class);
         }
+        */
+        // Backport end
         if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_19)) {
             PropertyParser.registerProperty(EntityText.class, EntityTag.class);
             PropertyParser.registerProperty(EntityTextShadowed.class, EntityTag.class);
diff --git a/plugin/src/main/java/com/denizenscript/denizen/objects/properties/entity/EntityColor.java b/plugin/src/main/java/com/denizenscript/denizen/objects/properties/entity/EntityColor.java
index f72fe102762f26abbbc91bf2efe2194b043f0d33..25c87aacc41943b449197c3b5dea1945832dadec 100644
--- a/plugin/src/main/java/com/denizenscript/denizen/objects/properties/entity/EntityColor.java
+++ b/plugin/src/main/java/com/denizenscript/denizen/objects/properties/entity/EntityColor.java
@@ -150,10 +150,18 @@ public class EntityColor extends EntityProperty<ElementTag> {
             Cat cat = as(Cat.class);
             ListTag list = mechanism.valueAsType(ListTag.class);
             String catTypeStr = list.get(0);
+            // Backport start - We're just legacy
+            /*
             Cat.Type catType = LegacyNamingHelper.convert(Cat.Type.class, catTypeStr);
             if (catType != null) {
                 cat.setCatType(catType);
             }
+            */
+            ElementTag catType = new ElementTag(list.get(0));
+            if (catType.matchesEnum(Cat.Type.class)) {
+                cat.setCatType(catType.asEnum(Cat.Type.class));
+            }
+            // Backport end
             else {
                 mechanism.echoError("Invalid cat type specified: " + catTypeStr);
             }
diff --git a/plugin/src/main/java/com/denizenscript/denizen/objects/properties/entity/EntityTeleportDuration.java b/plugin/src/main/java/com/denizenscript/denizen/objects/properties/entity/EntityTeleportDuration.java.ignored
similarity index 100%
rename from plugin/src/main/java/com/denizenscript/denizen/objects/properties/entity/EntityTeleportDuration.java
rename to plugin/src/main/java/com/denizenscript/denizen/objects/properties/entity/EntityTeleportDuration.java.ignored
diff --git a/plugin/src/main/java/com/denizenscript/denizen/objects/properties/item/ItemPotion.java b/plugin/src/main/java/com/denizenscript/denizen/objects/properties/item/ItemPotion.java
index 93bbed2f038006f3d82cb8eb3e65a989664a1510..e8053fb0574196384b4c06e132867c54b167e430 100644
--- a/plugin/src/main/java/com/denizenscript/denizen/objects/properties/item/ItemPotion.java
+++ b/plugin/src/main/java/com/denizenscript/denizen/objects/properties/item/ItemPotion.java
@@ -49,9 +49,14 @@ public class ItemPotion extends ItemProperty<ObjectTag> {
         ListTag result = new ListTag(potionEffects.size() + 1);
         if (getItemMeta() instanceof PotionMeta potionMeta) {
             MapTag base = new MapTag();
+            // Backport start - No more registries in MC 1.20.1
+            /*
             if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_20)) {
                 base.putObject("base_type", new ElementTag(Utilities.namespacedKeyToString(potionMeta.getBasePotionType().getKey()), true));
             }
+            */
+            if (false) {}
+            // Backport end
             else {
                 includeExtras = true;
             }
@@ -162,6 +167,8 @@ public class ItemPotion extends ItemProperty<ObjectTag> {
             ObjectTag firstObj = data.remove(0);
             if (firstObj.canBeType(MapTag.class)) {
                 MapTag baseEffect = firstObj.asType(MapTag.class, mechanism.context);
+                // Backport start - Newer API does not exist
+                /*
                 if (baseEffect.containsKey("base_type")) {
                     ElementTag baseTypeElement = baseEffect.getElement("base_type");
                     PotionType type = Registry.POTION.get(Utilities.parseNamespacedKey(baseTypeElement.asString()));
@@ -174,6 +181,9 @@ public class ItemPotion extends ItemProperty<ObjectTag> {
                     }
                     potionMeta.setBasePotionType(type);
                 }
+                */
+                if (false) {}
+                // Backport end
                 else {
                     applyLegacyMapBasePotionData(baseEffect, potionMeta, mechanism);
                 }
diff --git a/plugin/src/main/java/com/denizenscript/denizen/scripts/commands/BukkitCommandRegistry.java b/plugin/src/main/java/com/denizenscript/denizen/scripts/commands/BukkitCommandRegistry.java
index 3be94dbab9815f5dbf0684cb145820dffbc24d5f..4a54e3599da27777aa8f3ca9c81093458bdf90e5 100644
--- a/plugin/src/main/java/com/denizenscript/denizen/scripts/commands/BukkitCommandRegistry.java
+++ b/plugin/src/main/java/com/denizenscript/denizen/scripts/commands/BukkitCommandRegistry.java
@@ -175,9 +175,13 @@ public class BukkitCommandRegistry {
         registerCommand(SignCommand.class);
         registerCommand(StrikeCommand.class);
         registerCommand(SwitchCommand.class);
+        // Backport start - /tick was not added in MC 1.20.1 but newer 1.20 patch
+        /*
         if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_20)) {
             registerCommand(TickCommand.class);
         }
+        */
+        // Backport end
         registerCommand(TimeCommand.class);
         registerCommand(WeatherCommand.class);
         registerCommand(WorldBorderCommand.class);
diff --git a/plugin/src/main/java/com/denizenscript/denizen/scripts/commands/world/TickCommand.java b/plugin/src/main/java/com/denizenscript/denizen/scripts/commands/world/TickCommand.java.ignored
similarity index 100%
rename from plugin/src/main/java/com/denizenscript/denizen/scripts/commands/world/TickCommand.java
rename to plugin/src/main/java/com/denizenscript/denizen/scripts/commands/world/TickCommand.java.ignored
diff --git a/plugin/src/main/java/com/denizenscript/denizen/tags/core/ServerTagBase.java b/plugin/src/main/java/com/denizenscript/denizen/tags/core/ServerTagBase.java
index a379d8e1f41f2ffb9178531a09f20a90fe610ed0..8b2d973e97618cf34245f3d37e0c6c879e4d8724 100644
--- a/plugin/src/main/java/com/denizenscript/denizen/tags/core/ServerTagBase.java
+++ b/plugin/src/main/java/com/denizenscript/denizen/tags/core/ServerTagBase.java
@@ -913,15 +913,20 @@ public class ServerTagBase extends PseudoObjectTagBase<ServerTagBase> {
         // This is only their Bukkit enum names, as seen at <@link url https://hub.spigotmc.org/javadocs/spigot/org/bukkit/map/MapCursor.Type.html>.
         // -->
         // TODO once 1.20 is the minimum supported version, replace with direct registry-based handling
+        // Backport start - No more registries in MC 1.20.1
+        /*
         if (NMSHandler.getVersion().isAtLeast(NMSVersion.v1_20)) {
             tagProcessor.registerStaticTag(ListTag.class, "map_cursor_types", (attribute, object) -> {
                 listDeprecateWarn(attribute);
                 return Utilities.registryKeys(Registry.MAP_DECORATION_TYPE);
             }, "list_map_cursor_types");
         }
+        */
+        if (false) {}
         else {
             registerEnumListTag("map_cursor_types", (Class<? extends Enum<?>>) (Class<?>) MapCursor.Type.class, "list_map_cursor_types");
         }
+        // Backport end
 
         // <--[tag]
         // @attribute <server.world_types>
diff --git a/plugin/src/main/java/com/denizenscript/denizen/utilities/maps/MapCursor.java b/plugin/src/main/java/com/denizenscript/denizen/utilities/maps/MapCursor.java
index 4fbfa0966b6a8b6dc3213dd9f52e94643e64a2d5..187cbb465af511ffa417322b45e0ab1df6734d6c 100644
--- a/plugin/src/main/java/com/denizenscript/denizen/utilities/maps/MapCursor.java
+++ b/plugin/src/main/java/com/denizenscript/denizen/utilities/maps/MapCursor.java
@@ -27,7 +27,10 @@ public class MapCursor extends MapObject {
     }
 
     public org.bukkit.map.MapCursor.Type getType(PlayerTag player) {
-        return LegacyNamingHelper.convert(org.bukkit.map.MapCursor.Type.class, tag(typeTag, player));
+        // Backport start - We're just legacy
+//        return LegacyNamingHelper.convert(org.bukkit.map.MapCursor.Type.class, tag(typeTag, player));
+        return org.bukkit.map.MapCursor.Type.valueOf(tag(typeTag, player).toUpperCase());
+        // Backport end
     }
 
     private byte yawToDirection(double yaw) {
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/Handler.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/Handler.java
index 820b41713b7db3a9ead8a53c7ee80da20fbee108..1be08b84009c9f4c77e1a2f304f85b77f47b1ec2 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/Handler.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/Handler.java
@@ -33,7 +33,7 @@ import com.denizenscript.denizencore.utilities.debugging.Debug;
 import com.google.common.collect.Iterables;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
-import com.mojang.authlib.yggdrasil.ProfileResult;
+//import com.mojang.authlib.yggdrasil.ProfileResult; // Backport - This does not exist in older authlib
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.chat.BaseComponent;
@@ -151,7 +151,10 @@ public class Handler extends NMSHandler {
 
     @Override
     public boolean isCorrectMappingsCode() {
-        return ((CraftMagicNumbers) CraftMagicNumbers.INSTANCE).getMappingsVersion().equals("ee13f98a43b9c5abffdcc0bb24154460");
+        // Backport start - Different mappings code
+//        return ((CraftMagicNumbers) CraftMagicNumbers.INSTANCE).getMappingsVersion().equals("ee13f98a43b9c5abffdcc0bb24154460");
+        return ((CraftMagicNumbers) CraftMagicNumbers.INSTANCE).getMappingsVersion().equals("bcf3dcb22ad42792794079f9443df2c0");
+        // Backport end
     }
 
     @Override
@@ -209,14 +212,19 @@ public class Handler extends NMSHandler {
             }
             Property textures = profile.getProperties().containsKey("textures") ? Iterables.getFirst(profile.getProperties().get("textures"), null) : null;
             if (textures == null || !textures.hasSignature() || profile.getName() == null || profile.getId() == null) {
+                // Backport start - Rewrite profile refresh logic
+                /*
                 ProfileResult actualProfile = minecraftServer.getSessionService().fetchProfile(profile.getId(), true);
                 if (actualProfile == null) {
                     return null;
                 }
                 profile = actualProfile.profile();
+                */
+                profile = minecraftServer.getSessionService().fillProfileProperties(profile, true);
+                // Backport end
                 textures = profile.getProperties().containsKey("textures") ? Iterables.getFirst(profile.getProperties().get("textures"), null) : null;
             }
-            return new PlayerProfile(profile.getName(), profile.getId(), textures == null ? null : textures.value(), textures == null ? null : textures.signature());
+            return new PlayerProfile(profile.getName(), profile.getId(), textures == null ? null : textures.getValue(), textures == null ? null : textures.getSignature()); // Backport - Refactored class
         }
         catch (Exception e) {
             if (CoreConfiguration.debugVerbose) {
@@ -298,8 +306,10 @@ public class Handler extends NMSHandler {
         GameProfile gameProfile = ((CraftPlayer) player).getProfile();
         Property property = Iterables.getFirst(gameProfile.getProperties().get("textures"), null);
         return new PlayerProfile(gameProfile.getName(), gameProfile.getId(),
-                property != null ? property.value() : null,
-                property != null ? property.signature() : null);
+                // Backport start - Refactored class
+                property != null ? property.getValue() : null,
+                property != null ? property.getSignature() : null);
+                // Backport end
     }
 
     @Override
@@ -360,7 +370,7 @@ public class Handler extends NMSHandler {
                     tag.put("tag", TagParser.parseTag(item.getTag().getNbt()));
                 }
                 // TODO: 1.20.6: use components and fallback to creating item from tag when custom NBT is specified
-                ItemStack nmsStack = ItemStack.parseOptional(CraftRegistry.getMinecraftRegistry(), tag);
+                ItemStack nmsStack = ItemStack./*parseOptional(CraftRegistry.getMinecraftRegistry(), */of(tag); // Backport - Different way to do this in different MC version
                 return new ItemTag(CraftItemStack.asBukkitCopy(nmsStack)).identify();
             }
             catch (Throwable ex) {
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/ReflectionMappingsInfo.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/ReflectionMappingsInfo.java
index 397b0f80cecc4b65be6f107ac277a20eb9542b74..e5b58eee35cde6a7dade8a3799721b66de89f696 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/ReflectionMappingsInfo.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/ReflectionMappingsInfo.java
@@ -4,6 +4,8 @@ public class ReflectionMappingsInfo {
 
     // Content generated by ReflectionMappingsGenerator - https://github.com/DenizenScript/ReflectionMappingsGenerator
 
+    // Backport start - Different MC version, so different mappings
+    /*
     // net.minecraft.world.level.block.state.BlockBehaviour
     public static String BlockBehaviour_explosionResistance = "aH";
 
@@ -133,4 +135,141 @@ public class ReflectionMappingsInfo {
 
     // net.minecraft.world.item.AdventureModePredicate
     public static String AdventureModePredicate_predicates = "h";
+    */
+
+    // net.minecraft.advancements.AdvancementList
+    public static String AdvancementList_roots = "c";
+    public static String AdvancementList_tasks = "d";
+
+    // net.minecraft.world.level.block.state.BlockBehaviour
+    public static String BlockBehaviour_explosionResistance = "aF";
+
+    // net.minecraft.core.MappedRegistry
+    public static String MappedRegistry_frozen = "l";
+
+    // net.minecraft.world.item.crafting.RecipeManager
+    public static String RecipeManager_byName = "d";
+
+    // net.minecraft.world.entity.Entity
+    public static String Entity_onGround = "aJ";
+    public static String Entity_DATA_SHARED_FLAGS_ID = "an";
+    public static String Entity_DATA_CUSTOM_NAME = "aU";
+    public static String Entity_DATA_CUSTOM_NAME_VISIBLE = "aV";
+
+    // net.minecraft.world.entity.LivingEntity
+    public static String LivingEntity_attackStrengthTicker = "aQ";
+    public static String LivingEntity_autoSpinAttackTicks = "bz";
+    public static String LivingEntity_setLivingEntityFlag_method = "c";
+
+    // net.minecraft.world.entity.player.Player
+    public static String Player_DATA_PLAYER_ABSORPTION_ID = "e";
+    public static String Player_DATA_PLAYER_MODE_CUSTOMISATION = "bL";
+
+    // net.minecraft.server.level.ServerPlayer
+    public static String ServerPlayer_respawnForced = "cQ";
+
+    // net.minecraft.world.entity.monster.EnderMan
+    public static String EnderMan_DATA_CREEPY = "bV";
+
+    // net.minecraft.world.entity.monster.Zombie
+    public static String Zombie_inWaterTime = "cd";
+
+    // net.minecraft.world.item.Item
+    public static String Item_maxStackSize = "d";
+
+    // net.minecraft.world.level.Level
+    public static String Level_isClientSide = "B";
+
+    // net.minecraft.server.level.ThreadedLevelLightEngine
+    public static String ThreadedLevelLightEngine_addTask_method = "a";
+
+    // net.minecraft.server.level.ThreadedLevelLightEngine$TaskType
+    public static String ThreadedLevelLightEngineTaskType_PRE_UPDATE = "a";
+
+    // net.minecraft.world.entity.ExperienceOrb
+    public static String ExperienceOrb_age = "g";
+
+    // net.minecraft.world.entity.item.ItemEntity
+    public static String ItemEntity_DATA_ITEM = "c";
+
+    // net.minecraft.world.level.biome.Biome
+    public static String Biome_climateSettings = "i";
+
+    // net.minecraft.world.level.biome.BiomeSpecialEffects
+    public static String BiomeSpecialEffects_foliageColorOverride = "f";
+    public static String BiomeSpecialEffects_fogColor = "b";
+    public static String BiomeSpecialEffects_waterFogColor = "d";
+
+    // net.minecraft.network.Connection
+    public static String Connection_receiving = "k";
+
+    // net.minecraft.server.network.ServerGamePacketListenerImpl
+    public static String ServerGamePacketListenerImpl_aboveGroundTickCount = "H";
+    public static String ServerGamePacketListenerImpl_aboveGroundVehicleTickCount = "J";
+    public static String ServerGamePacketListenerImpl_connection = "h";
+    public static String ServerGamePacketListenerImpl_awaitingPositionFromClient = "D";
+    public static String ServerGamePacketListenerImpl_awaitingTeleport = "E";
+
+    // net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket
+    public static String ClientboundPlayerAbilitiesPacket_walkingSpeed = "j";
+
+    // net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket
+    public static String ClientboundSectionBlocksUpdatePacket_sectionPos = "b";
+    public static String ClientboundSectionBlocksUpdatePacket_positions = "c";
+    public static String ClientboundSectionBlocksUpdatePacket_states = "d";
+
+    // net.minecraft.network.protocol.game.ClientboundMoveEntityPacket
+    public static String ClientboundMoveEntityPacket_xa = "b";
+    public static String ClientboundMoveEntityPacket_ya = "c";
+    public static String ClientboundMoveEntityPacket_za = "d";
+    public static String ClientboundMoveEntityPacket_yRot = "e";
+    public static String ClientboundMoveEntityPacket_xRot = "f";
+
+    // net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket
+    public static String ClientboundSetEntityMotionPacket_id = "a";
+
+    // net.minecraft.network.protocol.game.ClientboundSetPassengersPacket
+    public static String ClientboundSetPassengersPacket_passengers = "b";
+
+    // net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket
+    public static String ClientboundTeleportEntityPacket_id = "a";
+    public static String ClientboundTeleportEntityPacket_x = "b";
+    public static String ClientboundTeleportEntityPacket_y = "c";
+    public static String ClientboundTeleportEntityPacket_z = "d";
+    public static String ClientboundTeleportEntityPacket_yRot = "e";
+    public static String ClientboundTeleportEntityPacket_xRot = "f";
+
+    // net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData$BlockEntityInfo
+    public static String ClientboundLevelChunkPacketDataBlockEntityInfo_packedXZ = "a";
+    public static String ClientboundLevelChunkPacketDataBlockEntityInfo_y = "b";
+
+    // net.minecraft.network.protocol.syncher.SynchedEntityData
+    public static String SynchedEntityData_itemsById = "e";
+
+    // net.minecraft.world.entity.projectile.FishingHook
+    public static String FishingHook_nibble = "j";
+    public static String FishingHook_timeUntilLured = "k";
+    public static String FishingHook_timeUntilHooked = "l";
+
+    // net.minecraft.world.level.block.state.BlockBehaviour$BlockStateBase
+    public static String BlockBehaviourBlockStateBase_getFluidState_method = "u";
+
+    // net.minecraft.world.level.material.FluidState
+    public static String FluidState_isRandomlyTicking_method = "f";
+    public static String FluidState_isEmpty_method = "c";
+    public static String FluidState_createLegacyBlock_method = "g";
+    public static String FluidState_animateTick_method = "a";
+
+    // net.minecraft.tags.TagNetworkSerialization$NetworkPayload
+    public static String TagNetworkSerializationNetworkPayload_tags = "a";
+
+    // net.minecraft.core.HolderSet$Named
+    public static String HolderSetNamed_bind_method = "b";
+
+    // net.minecraft.core.Holder$Reference
+    public static String HolderReference_bindTags_method = "a";
+
+    // net.minecraft.server.level.ServerLevel
+    public static String ServerLevel_sleepStatus = "O";
+    // Backport end
 }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/AdvancementHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/AdvancementHelperImpl.java
index 638a146a873630c8c091921e2a93cf9f0721cce1..f19f6850b10c05c0fb2dc8bafd7fd50969cf79fb 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/AdvancementHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/AdvancementHelperImpl.java
@@ -21,21 +21,36 @@ import org.bukkit.entity.Player;
 
 import java.util.*;
 
+// Backport start
+import java.lang.reflect.Field;
+import com.denizenscript.denizencore.utilities.ReflectionHelper;
+import com.denizenscript.denizen.nms.v1_20.ReflectionMappingsInfo;
+// Backport end
+
 public class AdvancementHelperImpl extends AdvancementHelper {
 
     private static final String IMPOSSIBLE_KEY = "impossible";
-    private static final Map<String, Criterion<?>> IMPOSSIBLE_CRITERIA = Map.of(IMPOSSIBLE_KEY, new Criterion<>(new ImpossibleTrigger(), new ImpossibleTrigger.TriggerInstance()));
+    private static final Map<String, Criterion/*<?>*/> IMPOSSIBLE_CRITERIA = Map.of(IMPOSSIBLE_KEY, new Criterion/*<>(new ImpossibleTrigger(), */(new ImpossibleTrigger.TriggerInstance())); // Backport - Different signature and arguments in different MC version
     private static final List<List<String>> IMPOSSIBLE_REQUIREMENTS = List.of(List.of(IMPOSSIBLE_KEY));
 
     public static ServerAdvancementManager getNMSAdvancementManager() {
         return ((CraftServer) Bukkit.getServer()).getServer().getAdvancements();
     }
 
+    // Backport start - Alias to getNMSAdvancementManager to make backport easier
+    public static ServerAdvancementManager getAdvancementDataWorld() {
+        return getNMSAdvancementManager();
+    }
+    // Backport end
+
+    public static Field FIELD_ADVANCEMENTLIST_LISTENER = ReflectionHelper.getFields(AdvancementList.class).getFirstOfType(AdvancementList.Listener.class); // Backport - Used by legacy code
     @Override
     public void register(com.denizenscript.denizen.nms.util.Advancement advancement) {
         if (advancement.temporary || advancement.registered) {
             return;
         }
+        // Backport start - Rewrite advancement registerer
+        /*
         AdvancementHolder nmsAdvancementHolder = asNMSCopy(advancement);
         Map<ResourceLocation, AdvancementHolder> nmsAdvancements = getNMSAdvancementManager().advancements;
         ImmutableMap.Builder<ResourceLocation, AdvancementHolder> mapBuilder = ImmutableMap.builderWithExpectedSize(nmsAdvancements.size() + 1);
@@ -53,10 +68,30 @@ public class AdvancementHelperImpl extends AdvancementHelper {
                 TreeNodePosition.run(root);
             }
         }
+        */
+        Advancement nms = asNMSCopy(advancement);
+        if (advancement.parent == null) {
+            Set<Advancement> roots = ReflectionHelper.getFieldValue(AdvancementList.class, ReflectionMappingsInfo.AdvancementList_roots, getAdvancementDataWorld().advancements);
+            roots.add(nms);
+            AdvancementList.Listener something = ReflectionHelper.getFieldValue(AdvancementList.class, FIELD_ADVANCEMENTLIST_LISTENER.getName(), getAdvancementDataWorld().advancements);
+            if (something != null) {
+                something.onAddAdvancementRoot(nms);
+            }
+        }
+        else {
+            Set<Advancement> branches = ReflectionHelper.getFieldValue(AdvancementList.class, ReflectionMappingsInfo.AdvancementList_tasks, getAdvancementDataWorld().advancements);
+            branches.add(nms);
+            AdvancementList.Listener something = ReflectionHelper.getFieldValue(AdvancementList.class, FIELD_ADVANCEMENTLIST_LISTENER.getName(), getAdvancementDataWorld().advancements);
+            if (something != null) {
+                something.onAddAdvancementTask(nms);
+            }
+        }
+        getAdvancementDataWorld().advancements.advancements.put(nms.getId(), nms);
+        // Backport end
         advancement.registered = true;
         if (!advancement.hidden && advancement.parent != null) {
             PacketHelperImpl.broadcast(new ClientboundUpdateAdvancementsPacket(false,
-                    List.of(nmsAdvancementHolder), Set.of(), Map.of()));
+                    List.of(nms/*AdvancementHolder*/), Set.of(), Map.of())); // Backport - Different arguments in different MC version
         }
     }
 
@@ -65,7 +100,9 @@ public class AdvancementHelperImpl extends AdvancementHelper {
         if (advancement.temporary || !advancement.registered) {
             return;
         }
+        // Backport start - Rewrite unregister logic
         ResourceLocation nmsKey = CraftNamespacedKey.toMinecraft(advancement.key);
+        /*
         Map<ResourceLocation, AdvancementHolder> nmsAdvancements = getNMSAdvancementManager().advancements;
         ImmutableMap.Builder<ResourceLocation, AdvancementHolder> mapBuilder = ImmutableMap.builderWithExpectedSize(nmsAdvancements.size() - 1);
         for (Map.Entry<ResourceLocation, AdvancementHolder> entry : nmsAdvancements.entrySet()) {
@@ -75,6 +112,20 @@ public class AdvancementHelperImpl extends AdvancementHelper {
         }
         getNMSAdvancementManager().advancements = mapBuilder.build();
         getNMSAdvancementManager().tree().remove(Set.of(nmsKey));
+        */
+        Map<ResourceLocation, Advancement> advancements = getAdvancementDataWorld().advancements.advancements;
+        ResourceLocation key = asResourceLocation(advancement.key);
+        Advancement nms = advancements.get(key);
+        if (advancement.parent == null) {
+            Set<Advancement> roots = ReflectionHelper.getFieldValue(AdvancementList.class, ReflectionMappingsInfo.AdvancementList_roots, getAdvancementDataWorld().advancements);
+            roots.remove(nms);
+        }
+        else {
+            Set<Advancement> branches = ReflectionHelper.getFieldValue(AdvancementList.class, ReflectionMappingsInfo.AdvancementList_tasks, getAdvancementDataWorld().advancements);
+            branches.remove(nms);
+        }
+        advancements.remove(key);
+        // Backport end
         advancement.registered = false;
         PacketHelperImpl.broadcast(new ClientboundUpdateAdvancementsPacket(false, List.of(), Set.of(nmsKey), Map.of()));
     }
@@ -86,19 +137,28 @@ public class AdvancementHelperImpl extends AdvancementHelper {
             return;
         }
         if (advancement.temporary) {
-            AdvancementHolder nmsAdvancement = asNMSCopy(advancement);
+            Advancement/*Holder*/ nmsAdvancement = asNMSCopy(advancement); // Backport - AdvancementHolder does not exist in MC 1.20.1
             AdvancementProgress progress = new AdvancementProgress();
-            progress.update(new AdvancementRequirements(IMPOSSIBLE_REQUIREMENTS));
+            // Backport start - Rewrite grantPartial logic
+//            progress.update(new AdvancementRequirements(IMPOSSIBLE_REQUIREMENTS));
+            Map<String, Criterion> criteria = new HashMap<>();
+            String[][] requirements = new String[advancement.length][];
+            for (int i = 0; i < advancement.length; i++) {
+                criteria.put(IMPOSSIBLE_KEY + i, new Criterion(new ImpossibleTrigger.TriggerInstance()));
+                requirements[i] = new String[] { IMPOSSIBLE_KEY + i };
+            }
+            progress.update(IMPOSSIBLE_CRITERIA, toTwoDimArray(IMPOSSIBLE_REQUIREMENTS));
+            // Backport end
             for (int i = 0; i < len; i++) {
                 progress.grantProgress(IMPOSSIBLE_KEY + i); // complete impossible criteria
             }
             PacketHelperImpl.send(player, new ClientboundUpdateAdvancementsPacket(false,
                     Collections.singleton(nmsAdvancement),
                     Collections.emptySet(),
-                    Collections.singletonMap(nmsAdvancement.id(), progress)));
+                    Collections.singletonMap(nmsAdvancement.getId(), progress))); // Backport - Refactored class
         }
         else {
-            AdvancementHolder nmsAdvancement = getNMSAdvancementManager().advancements.get(CraftNamespacedKey.toMinecraft(advancement.key));
+            Advancement/*Holder*/ nmsAdvancement = getNMSAdvancementManager().advancements.get(CraftNamespacedKey.toMinecraft(advancement.key)); // Backport - AdvancementHolder does not exist in MC 1.20.1
             for (int i = 0; i < len; i++) {
                 ((CraftPlayer) player).getHandle().getAdvancements().award(nmsAdvancement, IMPOSSIBLE_KEY + i);
             }
@@ -112,17 +172,20 @@ public class AdvancementHelperImpl extends AdvancementHelper {
             return;
         }
         if (advancement.temporary) {
-            AdvancementHolder nmsAdvancement = asNMSCopy(advancement);
+            Advancement/*Holder*/ nmsAdvancement = asNMSCopy(advancement); // Backport - AdvancementHolder does not exist in MC 1.20.1
             AdvancementProgress progress = new AdvancementProgress();
-            progress.update(new AdvancementRequirements(IMPOSSIBLE_REQUIREMENTS));
+            // Backport - Rewrite grant logic
+//            progress.update(new AdvancementRequirements(IMPOSSIBLE_REQUIREMENTS));
+            progress.update(IMPOSSIBLE_CRITERIA, toTwoDimArray(IMPOSSIBLE_REQUIREMENTS));
+            // Backport end
             progress.grantProgress(IMPOSSIBLE_KEY); // complete impossible criteria
             PacketHelperImpl.send(player, new ClientboundUpdateAdvancementsPacket(false,
                     Collections.singleton(nmsAdvancement),
                     Collections.emptySet(),
-                    Collections.singletonMap(nmsAdvancement.id(), progress)));
+                    Collections.singletonMap(nmsAdvancement.getId(), progress))); // Backport - Refactored class
         }
         else {
-            AdvancementHolder nmsAdvancement = getNMSAdvancementManager().advancements.get(CraftNamespacedKey.toMinecraft(advancement.key));
+            Advancement/*Holder*/ nmsAdvancement = getNMSAdvancementManager().advancements.get(CraftNamespacedKey.toMinecraft(advancement.key)); // Backport - AdvancementHolder does not exist in MC 1.20.1
             ((CraftPlayer) player).getHandle().getAdvancements().award(nmsAdvancement, IMPOSSIBLE_KEY);
         }
     }
@@ -136,7 +199,7 @@ public class AdvancementHelperImpl extends AdvancementHelper {
                     Collections.emptyMap()));
         }
         else {
-            AdvancementHolder nmsAdvancement = getNMSAdvancementManager().advancements.get(CraftNamespacedKey.toMinecraft(advancement.key));
+            Advancement/*Holder*/ nmsAdvancement = getNMSAdvancementManager().advancements.get(CraftNamespacedKey.toMinecraft(advancement.key)); // Backport - AdvancementHolder does not exist in MC 1.20.1
             ((CraftPlayer) player).getHandle().getAdvancements().revoke(nmsAdvancement, IMPOSSIBLE_KEY);
         }
     }
@@ -154,27 +217,40 @@ public class AdvancementHelperImpl extends AdvancementHelper {
         data.flushDirty(nmsPlayer); // load progress and update client
     }
 
-    private static AdvancementHolder asNMSCopy(com.denizenscript.denizen.nms.util.Advancement advancement) {
-        AdvancementHolder parent = advancement.parent != null
+    // Backport start - Rewrite asNMSCopy
+    private static Advancement/*Holder*/ asNMSCopy(com.denizenscript.denizen.nms.util.Advancement advancement) {
+        final ResourceLocation key = asResourceLocation(advancement.key);
+        Advancement/*Holder*/ parent = advancement.parent != null // Backport - AdvancementHolder does not exist in MC 1.20.1
                 ? getNMSAdvancementManager().advancements.get(CraftNamespacedKey.toMinecraft(advancement.parent))
                 : null;
         DisplayInfo display = new DisplayInfo(CraftItemStack.asNMSCopy(advancement.icon),
                 Handler.componentToNMS(FormattedTextHelper.parse(advancement.title, ChatColor.WHITE)), Handler.componentToNMS(FormattedTextHelper.parse(advancement.description, ChatColor.WHITE)),
-                Optional.ofNullable(advancement.background).map(CraftNamespacedKey::toMinecraft), AdvancementType.valueOf(advancement.frame.name()),
+                /*Optional.ofNullable(advancement.background).map(CraftNamespacedKey::toMinecraft)*/asResourceLocation(advancement.background), /*Advancement*/FrameType.valueOf(advancement.frame.name()), // Backport - Different signature in different MC version
                 advancement.toast, advancement.announceToChat, advancement.hidden);
         display.setLocation(advancement.xOffset, advancement.yOffset);
-        Map<String, Criterion<?>> criteria = IMPOSSIBLE_CRITERIA;
+        Map<String, Criterion/*<?>*/> criteria = IMPOSSIBLE_CRITERIA; // Backport - Different signature in different MC version
         List<List<String>> requirements = IMPOSSIBLE_REQUIREMENTS;
         if (advancement.length > 1) {
             criteria = new HashMap<>();
             requirements = new ArrayList<>(advancement.length);
             for (int i = 0; i < advancement.length; i++) {
-                criteria.put(IMPOSSIBLE_KEY + i, new Criterion<>(new ImpossibleTrigger(), new ImpossibleTrigger.TriggerInstance()));
+                criteria.put(IMPOSSIBLE_KEY + i, new Criterion/*<>(new ImpossibleTrigger(), */(new ImpossibleTrigger.TriggerInstance())); // Backport - Different signature in different MC version
                 requirements.set(i, List.of(IMPOSSIBLE_KEY + i));
             }
         }
-        AdvancementRequirements reqs = new AdvancementRequirements(requirements);
-        Advancement adv = new Advancement(parent == null ? Optional.empty() : Optional.of(parent.id()), Optional.of(display), AdvancementRewards.EMPTY, criteria, reqs, false); // TODO: 1.20: do we want to ever enable telemetry?
-        return new AdvancementHolder(CraftNamespacedKey.toMinecraft(advancement.key), adv);
+//        AdvancementRequirements reqs = new AdvancementRequirements(requirements);
+        String[][] reqs = toTwoDimArray(requirements);
+        Advancement adv = new Advancement(key, parent/* == null ? Optional.empty() : Optional.of(parent.id()), Optional.of(display)*/, display, AdvancementRewards.EMPTY, criteria, reqs, false); // TODO: 1.20: do we want to ever enable telemetry?
+//        return new AdvancementHolder(CraftNamespacedKey.toMinecraft(advancement.key), adv);
+        return adv;
+    }
+
+    private static ResourceLocation asResourceLocation(org.bukkit.NamespacedKey key) {
+        return key != null ? CraftNamespacedKey.toMinecraft(key) : null;
+    }
+
+    private static String[][] toTwoDimArray(List<List<String>> what) {
+        return what.stream().map(inside -> inside.toArray(String[]::new)).toArray(String[][]::new);
     }
+    // Backport end
 }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/BlockHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/BlockHelperImpl.java
index 0d618fa8f50a60f4b32fb62c8dcaaaad5db30739..76b299c5c65c460a52203e739249f246c7033f2c 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/BlockHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/BlockHelperImpl.java
@@ -18,7 +18,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderSet;
 import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.network.protocol.common.ClientboundUpdateTagsPacket;
+import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket; // Backport - Moved class
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.TagKey;
@@ -26,14 +26,14 @@ import net.minecraft.tags.TagNetworkSerialization;
 import net.minecraft.util.InclusiveRange;
 import net.minecraft.util.random.SimpleWeightedRandomList;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.item.component.ResolvableProfile;
+//import net.minecraft.world.item.component.ResolvableProfile; // Backport - This does not exist in MC 1.20.1
 import net.minecraft.world.level.BaseSpawner;
 import net.minecraft.world.level.SpawnData;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.chunk.ChunkAccess;
-import net.minecraft.world.level.chunk.status.ChunkStatus;
+import net.minecraft.world.level.chunk.ChunkStatus; // Backport - Moved class
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.PushReaction;
 import org.bukkit.Bukkit;
@@ -97,12 +97,24 @@ public class BlockHelperImpl implements BlockHelper {
     @Override
     public PlayerProfile getPlayerProfile(Skull skull) {
         // TODO: 1.20.6: Seems to be a holder for data that can make the request to complete it later - do we want to do that here?
+        // Backport start - Rewrite getPlayerProfile method
+        /*
         ResolvableProfile profile = getTE(((CraftSkull) skull)).owner;
         if (profile == null) {
             return null;
         }
         com.mojang.authlib.properties.Property property = Iterables.getFirst(profile.properties().get("textures"), null);
         return new PlayerProfile(profile.name().orElse(null), profile.id().orElse(null), property != null ? property.value() : null);
+        */
+        GameProfile profile = getTE(((CraftSkull) skull)).owner;
+        if (profile == null) {
+            return null;
+        }
+        String name = profile.getName();
+        UUID id = profile.getId();
+        com.mojang.authlib.properties.Property property = Iterables.getFirst(profile.getProperties().get("textures"), null);
+        return new PlayerProfile(name, id, property != null ? property.getValue() : null);
+        // Backport end
     }
 
     @Override
@@ -121,7 +133,7 @@ public class BlockHelperImpl implements BlockHelper {
     public CompoundTag getNbtData(Block block) {
         BlockEntity te = ((CraftWorld) block.getWorld()).getHandle().getBlockEntity(new BlockPos(block.getX(), block.getY(), block.getZ()), true);
         if (te != null) {
-            net.minecraft.nbt.CompoundTag compound = te.saveWithFullMetadata(CraftRegistry.getMinecraftRegistry());
+            net.minecraft.nbt.CompoundTag compound = te.saveWithFullMetadata(/*CraftRegistry.getMinecraftRegistry()*/); // Backport - Different arguments in different MC version
             return CompoundTagImpl.fromNMSTag(compound);
         }
         return null;
@@ -136,7 +148,10 @@ public class BlockHelperImpl implements BlockHelper {
         ctag = builder.build();
         BlockPos blockPos = new BlockPos(block.getX(), block.getY(), block.getZ());
         BlockEntity te = ((CraftWorld) block.getWorld()).getHandle().getBlockEntity(blockPos, true);
-        te.loadWithComponents(((CompoundTagImpl) ctag).toNMSTag(), CraftRegistry.getMinecraftRegistry());
+        // Backport start - Rewrite setNbtData method
+//        te.loadWithComponents(((CompoundTagImpl) ctag).toNMSTag(), CraftRegistry.getMinecraftRegistry());
+        te.load(((CompoundTagImpl) ctag).toNMSTag());
+        // Backport end
     }
 
     @Override
@@ -230,7 +245,7 @@ public class BlockHelperImpl implements BlockHelper {
         }
         try {
             // Wrangle a fake entity
-            org.bukkit.entity.Entity bukkitEntity = ((CraftWorld) spawner.getWorld()).createEntity(spawner.getLocation(), entity.getBukkitEntityType().getEntityClass());
+            org.bukkit.entity.Entity bukkitEntity = ((CraftWorld) spawner.getWorld()).createEntity(spawner.getLocation(), entity.getBukkitEntityType().getEntityClass()).getBukkitEntity(); // Backport - Different return type in different MC version
             Entity nmsEntity = ((CraftEntity) bukkitEntity).getHandle();
             EntityTag entityTag = new EntityTag(bukkitEntity);
             entityTag.isFake = true;
@@ -252,6 +267,14 @@ public class BlockHelperImpl implements BlockHelper {
         }
     }
 
+    // Backport start - Newer API does not exist
+    @Override
+    public org.bukkit.Color getMapColor(Block block) {
+        CraftBlock craftBlock = (CraftBlock) block;
+        return org.bukkit.Color.fromRGB(craftBlock.getNMS().getMapColor(craftBlock.getHandle(), craftBlock.getPosition()).col);
+    }
+    // Backport end
+
     @Override
     public void setSpawnerCustomRules(CreatureSpawner spawner, int skyMin, int skyMax, int blockMin, int blockMax) {
         try {
@@ -260,7 +283,7 @@ public class BlockHelperImpl implements BlockHelper {
             BaseSpawner nmsSpawner = nmsSnapshot.getSpawner();
             SpawnData toSpawn = nmsSpawner.nextSpawnData;
             SpawnData.CustomSpawnRules rules = skyMin == -1 ? null : new SpawnData.CustomSpawnRules(new InclusiveRange<>(skyMin, skyMax), new InclusiveRange<>(blockMin, blockMax));
-            nmsSpawner.nextSpawnData = new SpawnData(toSpawn.entityToSpawn(), Optional.ofNullable(rules), toSpawn.equipment());
+            nmsSpawner.nextSpawnData = new SpawnData(toSpawn.entityToSpawn(), Optional.ofNullable(rules)/*, toSpawn.equipment()*/); // Backport - Different arguments in different MC version
             nmsSpawner.spawnPotentials = SimpleWeightedRandomList.empty();
         }
         catch (Throwable ex) {
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/ChunkHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/ChunkHelperImpl.java
index e9dedf8d7215f5d850760fe7280577ff05652ec0..f1386b5f94b19a9e226e7c84c3bfaab7bff29b9f 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/ChunkHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/ChunkHelperImpl.java
@@ -16,7 +16,7 @@ import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.PalettedContainer;
-import net.minecraft.world.level.chunk.status.ChunkStatus;
+import net.minecraft.world.level.chunk.ChunkStatus; // Backport - Moved class
 import net.minecraft.world.level.levelgen.Heightmap;
 import org.bukkit.World;
 import org.bukkit.Chunk;
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/CustomEntityHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/CustomEntityHelperImpl.java
index 0c1aa4a9d65e37fe459e90f18deabf673b7a9abb..9d165d5872f9cb7500a063610153326c5fc648de 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/CustomEntityHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/CustomEntityHelperImpl.java
@@ -15,7 +15,7 @@ import com.denizenscript.denizen.utilities.BukkitImplDeprecations;
 import com.denizenscript.denizencore.utilities.CoreUtilities;
 import com.denizenscript.denizencore.utilities.debugging.Debug;
 import com.mojang.authlib.GameProfile;
-import net.minecraft.server.level.ClientInformation;
+//import net.minecraft.server.level.ClientInformation; // Backport - ClientInformation does not exist in MC 1.20.1
 import net.minecraft.server.level.ServerLevel;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -116,7 +116,7 @@ public class CustomEntityHelperImpl implements CustomEntityHelper {
         playerProfile.setUniqueId(uuid);
 
         GameProfile gameProfile = ProfileEditorImpl.getGameProfile(playerProfile);
-        final EntityFakePlayerImpl fakePlayer = new EntityFakePlayerImpl(worldServer.getServer(), worldServer, gameProfile, ClientInformation.createDefault(), doAdd);
+        final EntityFakePlayerImpl fakePlayer = new EntityFakePlayerImpl(worldServer.getServer(), worldServer, gameProfile/*, ClientInformation.createDefault()*/, doAdd); // Backport - ClientInformation does not exist in MC 1.20.1
 
         fakePlayer.forceSetPositionRotation(location.getX(), location.getY(), location.getZ(),
                 location.getYaw(), location.getPitch());
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/EnchantmentHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/EnchantmentHelperImpl.java
index 51d9b61a70533acb7c4185bb198a2d10d5d4f7e9..cd71f0bc530ec33bfdf33e0cc3a1261bd10a9428 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/EnchantmentHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/EnchantmentHelperImpl.java
@@ -26,7 +26,7 @@ import org.bukkit.craftbukkit.v1_20_R1.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.v1_20_R1.util.CraftNamespacedKey;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.event.entity.EntityDamageEvent;
-import net.minecraft.world.item.enchantment.Enchantment.EnchantmentDefinition;
+//import net.minecraft.world.item.enchantment.Enchantment.EnchantmentDefinition; // Backport - This does not exist in MC 1.20.1
 
 import java.lang.reflect.Field;
 import java.util.IdentityHashMap;
@@ -34,24 +34,28 @@ import java.util.Map;
 
 public class EnchantmentHelperImpl extends EnchantmentHelper {
     public static final Field REGISTRY_FROZEN = ReflectionHelper.getFields(MappedRegistry.class).get(ReflectionMappingsInfo.MappedRegistry_frozen, boolean.class);
-    public static final Field REGISTRY_INTRUSIVE_HOLDERS = ReflectionHelper.getFields(MappedRegistry.class).get(ReflectionMappingsInfo.MappedRegistry_unregisteredIntrusiveHolders, Map.class);
+//    public static final Field REGISTRY_INTRUSIVE_HOLDERS = ReflectionHelper.getFields(MappedRegistry.class).get(ReflectionMappingsInfo.MappedRegistry_unregisteredIntrusiveHolders, Map.class); // Backport - This does not exist in MC 1.20.1
 
     @Override
     public org.bukkit.enchantments.Enchantment registerFakeEnchantment(EnchantmentScriptContainer.EnchantmentReference script) {
         try {
+            // Backport start - Holders does not exist in MC 1.20.1, getting frozen state is delayed
+            /*
             Map holders = (Map) REGISTRY_INTRUSIVE_HOLDERS.get(BuiltInRegistries.ENCHANTMENT);
             if (holders == null) {
                 REGISTRY_INTRUSIVE_HOLDERS.set(BuiltInRegistries.ENCHANTMENT, new IdentityHashMap());
             }
             boolean wasFrozen = REGISTRY_FROZEN.getBoolean(BuiltInRegistries.ENCHANTMENT);
             REGISTRY_FROZEN.setBoolean(BuiltInRegistries.ENCHANTMENT, false);
+            */
+            // Backport end
             EquipmentSlot[] slots = new EquipmentSlot[script.script.slots.size()];
             for (int i = 0; i < slots.length; i++) {
                 slots[i] = EquipmentSlot.valueOf(CoreUtilities.toUpperCase(script.script.slots.get(i)));
             }
             // TODO: 1.20.6: rarity is provided as an int, can make our own mirror enum; categories seemed to only over control #canEnchant(ItemStack), so can probably safely phase them out?
             // net.minecraft.world.item.enchantment.Enchantment.Rarity.valueOf(script.script.rarity), EnchantmentCategory.valueOf(script.script.category), slots
-            net.minecraft.world.item.enchantment.Enchantment nmsEnchant = new net.minecraft.world.item.enchantment.Enchantment(null) {
+            net.minecraft.world.item.enchantment.Enchantment nmsEnchant = new net.minecraft.world.item.enchantment.Enchantment(/*null*/net.minecraft.world.item.enchantment.Enchantment.Rarity.valueOf(script.script.rarity), net.minecraft.world.item.enchantment.EnchantmentCategory.valueOf(script.script.category), slots) { // Backport - Different constructor in different MC version
                 // TODO: 1.20.6: methods are final now and the values are provided by EnchantmentDefinition - would probably need to create a new one on reload and modify the existing enchantment
 //                @Override
 //                public int getMinLevel() {
@@ -142,13 +146,18 @@ public class EnchantmentHelperImpl extends EnchantmentHelper {
             NamespacedKey enchantmentKey = new NamespacedKey(Denizen.getInstance(), script.script.id);
             Registry.register(BuiltInRegistries.ENCHANTMENT, enchantmentKey.toString(), nmsEnchant);
             String enchName = CoreUtilities.toUpperCase(script.script.id);
-            CraftEnchantment ench = new CraftEnchantment(enchantmentKey, nmsEnchant) {
+            // Backport start - Getting frozen state is delayed
+            boolean wasFrozen = REGISTRY_FROZEN.getBoolean(BuiltInRegistries.ENCHANTMENT);
+            REGISTRY_FROZEN.setBoolean(BuiltInRegistries.ENCHANTMENT, false);
+            Registry.register(BuiltInRegistries.ENCHANTMENT, "denizen:" + script.script.id, nmsEnchant);
+            // Backport end
+            CraftEnchantment ench = new CraftEnchantment(/*enchantmentKey, */nmsEnchant) {
                 @Override
                 public String getName() {
                     return enchName;
                 }
             };
-            REGISTRY_INTRUSIVE_HOLDERS.set(BuiltInRegistries.ENCHANTMENT, holders);
+//            REGISTRY_INTRUSIVE_HOLDERS.set(BuiltInRegistries.ENCHANTMENT, holders); // Backport - This does not exist in MC 1.20.1
             if (wasFrozen) {
                 BuiltInRegistries.ENCHANTMENT.freeze();
             }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/EntityHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/EntityHelperImpl.java
index 0b7762b5d7f3017894779b7084703f079e5a8a7f..cc7ca972fa16b6966c830ac267df142dba3571f8 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/EntityHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/EntityHelperImpl.java
@@ -31,7 +31,7 @@ import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerEntity;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.network.CommonListenerCookie;
+//import net.minecraft.server.network.CommonListenerCookie; // Backport - Cookie does noe exist in MC 1.20.1
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
@@ -115,7 +115,16 @@ public class EntityHelperImpl extends EntityHelper {
             damage = attrib.getValue();
         }
         if (attacker.getEquipment() != null) {
-            damage += EnchantmentHelper.getDamageBonus(CraftItemStack.asNMSCopy(attacker.getEquipment().getItemInMainHand()), CraftEntityType.bukkitToMinecraft(target.getType()));
+            // Backport start - Rewrite damage bonus logic
+            net.minecraft.world.entity.MobType monsterType;
+            if (target instanceof LivingEntity) {
+                monsterType = ((CraftLivingEntity) target).getHandle().getMobType();
+            }
+            else {
+                monsterType = net.minecraft.world.entity.MobType.UNDEFINED;
+            }
+            damage += EnchantmentHelper.getDamageBonus(CraftItemStack.asNMSCopy(attacker.getEquipment().getItemInMainHand()), /*CraftEntityType.bukkitToMinecraft(target.getType())*/monsterType);
+            // Backport end
         }
         if (damage <= 0) {
             return 0;
@@ -135,7 +144,7 @@ public class EntityHelperImpl extends EntityHelper {
             if (!(nmsTarget instanceof net.minecraft.world.entity.LivingEntity livingTarget)) {
                 return damage;
             }
-            damage = CombatRules.getDamageAfterAbsorb((float) damage, source, (float) livingTarget.getArmorValue(), (float) livingTarget.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
+            damage = CombatRules.getDamageAfterAbsorb((float) damage, /*source,*/ (float) livingTarget.getArmorValue(), (float) livingTarget.getAttributeValue(Attributes.ARMOR_TOUGHNESS)); // Backport - Different arguments in different MC version
             int enchantDamageModifier = EnchantmentHelper.getDamageProtection(livingTarget.getArmorSlots(), source);
             if (enchantDamageModifier > 0) {
                 damage = CombatRules.getDamageAfterMagicAbsorb((float) damage, (float) enchantDamageModifier);
@@ -163,7 +172,10 @@ public class EntityHelperImpl extends EntityHelper {
     public void forceInteraction(Player player, Location location) {
         CraftPlayer craftPlayer = (CraftPlayer) player;
         // TODO: 1.20.6: passing a null player isn't valid (and seemingly never was) - need to require HumanEntity in the mechanism
-        ((CraftBlock) location.getBlock()).getNMS().useItemOn(craftPlayer.getHandle().getMainHandItem(), ((CraftWorld) location.getWorld()).getHandle(),
+        // Backport start - Refactored method
+//        ((CraftBlock) location.getBlock()).getNMS().useItemOn(craftPlayer.getHandle().getMainHandItem(), ((CraftWorld) location.getWorld()).getHandle(),
+        ((CraftBlock) location.getBlock()).getNMS().use(((CraftWorld) location.getWorld()).getHandle(),
+        // Backport end
                 craftPlayer.getHandle(), InteractionHand.MAIN_HAND,
                 new BlockHitResult(new Vec3(0, 0, 0), null, CraftLocation.toBlockPosition(location), false));
     }
@@ -454,7 +466,7 @@ public class EntityHelperImpl extends EntityHelper {
             NMSHandler.chunkHelper.changeChunkServerThread(world);
             return ((CraftWorld) world).getHandle().clip(new ClipContext(new Vec3(start.getX(), start.getY(), start.getZ()),
                     new Vec3(end.getX(), end.getY(), end.getZ()),
-                    ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, CollisionContext.empty()));
+                    ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, /*CollisionContext.empty()*/null)); // Backport - Different arguments in different MC version
         }
         finally {
             NMSHandler.chunkHelper.restoreServerThread(world);
@@ -512,7 +524,7 @@ public class EntityHelperImpl extends EntityHelper {
         packetData.writeByte((byte)((int)(location.getYaw() * 256.0F / 360.0F)));
         packetData.writeByte((byte)((int)(location.getPitch() * 256.0F / 360.0F)));
         packetData.writeBoolean(entity.isOnGround());
-        ClientboundTeleportEntityPacket packet = ClientboundTeleportEntityPacket.STREAM_CODEC.decode(packetData);
+        ClientboundTeleportEntityPacket packet = /*ClientboundTeleportEntityPacket.STREAM_CODEC.decode(packetData)*/new ClientboundTeleportEntityPacket(packetData); // Backport - StreamCodec does not exist in MC 1.20.1
         for (Player player : getPlayersThatSee(entity)) {
             PacketHelperImpl.send(player, packet);
         }
@@ -542,6 +554,22 @@ public class EntityHelperImpl extends EntityHelper {
         ((CraftEntity) entity).getHandle().setBoundingBox(new AABB(box.getMinX(), box.getMinY(), box.getMinZ(), box.getMaxX(), box.getMaxY(), box.getMaxZ()));
     }
 
+    // Backport start - Newer API does not exist
+    @Override
+    public List<Player> getPlayersThatSee(Entity entity) {
+        ChunkMap tracker = ((ServerLevel) ((CraftEntity) entity).getHandle().level()).getChunkSource().chunkMap;
+        ChunkMap.TrackedEntity entityTracker = tracker.entityMap.get(entity.getEntityId());
+        ArrayList<Player> output = new ArrayList<>();
+        if (entityTracker == null) {
+            return output;
+        }
+        for (net.minecraft.server.network.ServerPlayerConnection player : entityTracker.seenBy) {
+            output.add(player.getPlayer().getBukkitEntity());
+        }
+        return output;
+    }
+    // Backport end
+
     public static final Field EXPERIENCE_ORB_AGE = ReflectionHelper.getFields(net.minecraft.world.entity.ExperienceOrb.class).get(ReflectionMappingsInfo.ExperienceOrb_age, int.class);
 
     @Override
@@ -609,7 +637,7 @@ public class EntityHelperImpl extends EntityHelper {
             case FALL -> sources.fall();
             case FIRE -> sources.inFire();
             case FIRE_TICK -> sources.onFire();
-            case MELTING -> sources.melting();
+            case MELTING -> sources.melting; // Backport - Refactored class
             case LAVA -> sources.lava();
             case DROWNING -> sources.drown();
             case BLOCK_EXPLOSION -> nmsSource instanceof PrimedTnt primedTnt ? sources.explosion(primedTnt, primedTnt.getOwner()) : sources.explosion(null);
@@ -617,7 +645,7 @@ public class EntityHelperImpl extends EntityHelper {
             case VOID -> sources.fellOutOfWorld();
             case LIGHTNING -> sources.lightningBolt();
             case STARVATION -> sources.starve();
-            case POISON -> sources.poison();
+            case POISON -> sources.poison; // Backport - Refactored class
             case MAGIC -> sources.magic();
             case WITHER -> sources.wither();
             case FALLING_BLOCK -> sources.fallingBlock(nmsSource);
@@ -676,7 +704,7 @@ public class EntityHelperImpl extends EntityHelper {
     public EntityTag getMobSpawnerDisplayEntity(CreatureSpawner spawner) {
         SpawnerBlockEntity nmsSpawner = BlockHelperImpl.getTE((CraftCreatureSpawner) spawner);
         ServerLevel level = ((CraftWorld) spawner.getWorld()).getHandle();
-        net.minecraft.world.entity.Entity nmsEntity = nmsSpawner.getSpawner().getOrCreateDisplayEntity(level, nmsSpawner.getBlockPos());
+        net.minecraft.world.entity.Entity nmsEntity = nmsSpawner.getSpawner().getOrCreateDisplayEntity(level, level.random, nmsSpawner.getBlockPos()); // Backport - Different arguments in different MC version
         return new EntityTag(nmsEntity.getBukkitEntity());
     }
 
@@ -749,7 +777,7 @@ public class EntityHelperImpl extends EntityHelper {
             nmsEntity.unsetRemoved();
             nmsEntity.setUUID(id);
             if (nmsEntity instanceof ServerPlayer nmsPlayer) {
-                playerList.placeNewPlayer(DenizenNetworkManagerImpl.getConnection(nmsPlayer), nmsPlayer, new CommonListenerCookie(nmsPlayer.getGameProfile(), nmsPlayer.connection.latency(), nmsPlayer.clientInformation(), nmsPlayer.connection.isTransferred()));
+                playerList.placeNewPlayer(DenizenNetworkManagerImpl.getConnection(nmsPlayer), nmsPlayer/*, new CommonListenerCookie(nmsPlayer.getGameProfile(), nmsPlayer.connection.latency(), nmsPlayer.clientInformation(), nmsPlayer.connection.isTransferred())*/); // Backport - Cookie does not exist in MC 1.20.1
             }
             else {
                 level.addFreshEntity(nmsEntity);
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/FishingHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/FishingHelperImpl.java
index 0727d350a72129f5480601e896541430b0239ac3..4bd4411f4e95c89d069488563485d2bcce70ec00 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/FishingHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/FishingHelperImpl.java
@@ -43,7 +43,7 @@ public class FishingHelperImpl implements FishingHelper {
             case DEFAULT -> {
                 float f = ((CraftWorld) fishHook.getWorld()).getHandle().random.nextFloat();
                 int i = EnchantmentHelper.getMobLooting(nmsHook.getPlayerOwner());
-                int j = EnchantmentHelper.getEnchantmentLevel(Enchantments.LUCK_OF_THE_SEA, nmsHook.getPlayerOwner());
+                int j = EnchantmentHelper.getEnchantmentLevel(Enchantments./*LUCK_OF_THE_SEA*/FISHING_LUCK, nmsHook.getPlayerOwner()); // Backport - Renamed enum constant
                 float f1 = 0.1F - (float) i * 0.025F - (float) j * 0.01F;
                 float f2 = 0.05F + (float) i * 0.01F - (float) j * 0.01F;
 
@@ -71,12 +71,21 @@ public class FishingHelperImpl implements FishingHelper {
     }
 
     public ItemStack getRandomReward(FishingHook nmsHook, ResourceKey<LootTable> key) {
+    // Backport start - rewrite get random reward logic
+        return getRandomReward(nmsHook, key.location());
+    }
+
+    public ItemStack getRandomReward(FishingHook nmsHook, ResourceLocation key) {
+    // Backport end
         ServerLevel nmsWorld = (ServerLevel) nmsHook.level();
         Map<LootContextParam<?>, Object> params = Maps.newIdentityHashMap();
         params.put(LootContextParams.ORIGIN, new Vec3(nmsHook.getX(), nmsHook.getY(), nmsHook.getZ()));
         params.put(LootContextParams.TOOL, new ItemStack(Items.FISHING_ROD));
         LootParams nmsLootParams = new LootParams(nmsWorld, params, Maps.newHashMap(), 0);
-        List<ItemStack> nmsItems = nmsHook.registryAccess().registryOrThrow(Registries.LOOT_TABLE).get(key).getRandomItems(nmsLootParams);
+        // Backport start - rewrite get random reward logic
+//        List<ItemStack> nmsItems = nmsHook.registryAccess().registryOrThrow(Registries.LOOT_TABLE).get(key).getRandomItems(nmsLootParams);
+        List<ItemStack> nmsItems = nmsWorld.getServer().getLootData().getLootTable(key).getRandomItems(nmsLootParams);
+        // Backport end
         return nmsItems.get(nmsWorld.random.nextInt(nmsItems.size()));
     }
 
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/ItemHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/ItemHelperImpl.java
index 1addc943aeccba536e33cefeee59fb97b487b4c1..0e0ca18ab286585a203ea10424faa65e2e7cbe81 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/ItemHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/ItemHelperImpl.java
@@ -22,9 +22,13 @@ import com.mojang.serialization.Dynamic;
 import net.md_5.bungee.api.ChatColor;
 import net.minecraft.advancements.critereon.BlockPredicate;
 import net.minecraft.core.*;
+// Backport start - Data components do not exist in MC 1.20.1
+/*
 import net.minecraft.core.component.DataComponentMap;
 import net.minecraft.core.component.DataComponentType;
 import net.minecraft.core.component.DataComponents;
+*/
+// Backport end
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.NbtUtils;
@@ -32,13 +36,17 @@ import net.minecraft.network.chat.Component;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.datafix.fixes.References;
-import net.minecraft.world.item.AdventureModePredicate;
+//import net.minecraft.world.item.AdventureModePredicate; // Backport - This does not exist in MC 1.20.1
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.alchemy.PotionBrewing;
+// Backport start - Item components do not exist in MC 1.20.1
+/*
 import net.minecraft.world.item.component.CustomData;
 import net.minecraft.world.item.component.ItemLore;
 import net.minecraft.world.item.component.ResolvableProfile;
+*/
+// Backport end
 import net.minecraft.world.item.crafting.*;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
@@ -50,7 +58,7 @@ import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.MapColor;
-import net.minecraft.world.level.saveddata.maps.MapId;
+//import net.minecraft.world.level.saveddata.maps.MapId; // Backport - This does not exist in MC 1.20.1
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import org.bukkit.Bukkit;
 import org.bukkit.DyeColor;
@@ -80,21 +88,32 @@ import java.lang.reflect.Field;
 import java.util.*;
 import java.util.function.Predicate;
 
+// Backport start
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.chat.ComponentSerializer;
+import net.minecraft.nbt.ListTag;
+// Backport end
+
 public class ItemHelperImpl extends ItemHelper {
 
-    public static net.minecraft.world.item.crafting.RecipeHolder<?> getNMSRecipe(NamespacedKey key) {
+    public static net.minecraft.world.item.crafting.Recipe/*Holder*/<?> getNMSRecipe(NamespacedKey key) { // Backport - RecipeHolder does not exist in MC 1.20.1
         ResourceLocation nmsKey = CraftNamespacedKey.toMinecraft(key);
         return ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().byKey(nmsKey).orElse(null);
     }
 
-    public static final Field Item_components = ReflectionHelper.getFields(Item.class).get(ReflectionMappingsInfo.Item_components, DataComponentMap.class);
+//    public static final Field Item_components = ReflectionHelper.getFields(Item.class).get(ReflectionMappingsInfo.Item_components, DataComponentMap.class); // Backport - Item components do not exist in MC 1.20.1
 
     public void setMaxStackSize(Material material, int size) {
         try {
             ReflectionHelper.getFinalSetter(Material.class, "maxStack").invoke(material, size);
+            // Backport start - Rewrite setMaxStackSize method
+            /*
             Item nmsItem = BuiltInRegistries.ITEM.get(CraftNamespacedKey.toMinecraft(material.getKey()));
             DataComponentMap currentComponents = nmsItem.components();
             Item_components.set(nmsItem, DataComponentMap.composite(currentComponents, DataComponentMap.builder().set(DataComponents.MAX_STACK_SIZE, size).build()));
+            */
+            ReflectionHelper.getFinalSetter(Item.class, ReflectionMappingsInfo.Item_maxStackSize).invoke(BuiltInRegistries.ITEM.get(CraftNamespacedKey.toMinecraft(material.getKey())), size);
+            // Backport end
         }
         catch (Throwable ex) {
             Debug.echoError(ex);
@@ -140,28 +159,32 @@ public class ItemHelperImpl extends ItemHelper {
         AbstractCookingRecipe recipe;
         CookingBookCategory categoryValue = category == null ? CookingBookCategory.MISC : CookingBookCategory.valueOf(CoreUtilities.toUpperCase(category));
         if (type.equalsIgnoreCase("smoker")) {
-            recipe = new SmokingRecipe(group, categoryValue, itemRecipe, CraftItemStack.asNMSCopy(result), exp, time);
+            recipe = new SmokingRecipe(key, group, categoryValue, itemRecipe, CraftItemStack.asNMSCopy(result), exp, time); // Backport - Different constructor in different MC version
         }
         else if (type.equalsIgnoreCase("blast")) {
-            recipe = new BlastingRecipe(group, categoryValue, itemRecipe, CraftItemStack.asNMSCopy(result), exp, time);
+            recipe = new BlastingRecipe(key, group, categoryValue, itemRecipe, CraftItemStack.asNMSCopy(result), exp, time); // Backport - Different constructor in different MC version
         }
         else if (type.equalsIgnoreCase("campfire")) {
-            recipe = new CampfireCookingRecipe(group, categoryValue, itemRecipe, CraftItemStack.asNMSCopy(result), exp, time);
+            recipe = new CampfireCookingRecipe(key, group, categoryValue, itemRecipe, CraftItemStack.asNMSCopy(result), exp, time); // Backport - Different constructor in different MC version
         }
         else {
-            recipe = new SmeltingRecipe(group, categoryValue, itemRecipe, CraftItemStack.asNMSCopy(result), exp, time);
+            recipe = new SmeltingRecipe(key, group, categoryValue, itemRecipe, CraftItemStack.asNMSCopy(result), exp, time); // Backport - Different constructor in different MC version
         }
-        RecipeHolder<AbstractCookingRecipe> holder = new RecipeHolder<>(key, recipe);
-        ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().addRecipe(holder);
+        // Backport start - RecipeHolder does not exist in MC 1.20.1
+//        RecipeHolder<AbstractCookingRecipe> holder = new RecipeHolder<>(key, recipe);
+        ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().addRecipe(/*holder*/recipe);
+        // Backport end
     }
 
     @Override
     public void registerStonecuttingRecipe(String keyName, String group, ItemStack result, ItemStack[] ingredient, boolean exact) {
         ResourceLocation key = new ResourceLocation("denizen", keyName);
         Ingredient itemRecipe = itemArrayToRecipe(ingredient, exact);
-        StonecutterRecipe recipe = new StonecutterRecipe(group, itemRecipe, CraftItemStack.asNMSCopy(result));
-        RecipeHolder<StonecutterRecipe> holder = new RecipeHolder<>(key, recipe);
-        ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().addRecipe(holder);
+        StonecutterRecipe recipe = new StonecutterRecipe(key, group, itemRecipe, CraftItemStack.asNMSCopy(result)); // Backport - Different constructor in different MC version
+        // Backport start - RecipeHolder does not exist in MC 1.20.1
+//        RecipeHolder<StonecutterRecipe> holder = new RecipeHolder<>(key, recipe);
+        ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().addRecipe(/*holder*/recipe);
+        // Backport end
     }
 
     @Override
@@ -170,9 +193,11 @@ public class ItemHelperImpl extends ItemHelper {
         Ingredient templateItemRecipe = itemArrayToRecipe(templateItem, templateExact);
         Ingredient baseItemRecipe = itemArrayToRecipe(baseItem, baseExact);
         Ingredient upgradeItemRecipe = itemArrayToRecipe(upgradeItem, upgradeExact);
-        SmithingTransformRecipe recipe = new SmithingTransformRecipe(templateItemRecipe, baseItemRecipe, upgradeItemRecipe, CraftItemStack.asNMSCopy(result));
-        RecipeHolder<SmithingTransformRecipe> holder = new RecipeHolder<>(key, recipe);
-        ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().addRecipe(holder);
+        // Backport start - Different constructor in different MC version, RecipeHolder does not exist in MC 1.20.1
+        SmithingTransformRecipe recipe = new SmithingTransformRecipe(key, templateItemRecipe, baseItemRecipe, upgradeItemRecipe, CraftItemStack.asNMSCopy(result));
+//        RecipeHolder<SmithingTransformRecipe> holder = new RecipeHolder<>(key, recipe);
+        ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().addRecipe(/*holder*/recipe);
+        // Backport end
     }
 
     @Override
@@ -184,9 +209,11 @@ public class ItemHelperImpl extends ItemHelper {
             ingredientList.add(itemArrayToRecipe(ingredients.get(i), exact[i]));
         }
         // TODO: 1.19.3: Add support for choosing a CraftingBookCategory
-        ShapelessRecipe recipe = new ShapelessRecipe(group, categoryValue, CraftItemStack.asNMSCopy(result), NonNullList.of(null, ingredientList.toArray(new Ingredient[0])));
-        RecipeHolder<ShapelessRecipe> holder = new RecipeHolder<>(key, recipe);
-        ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().addRecipe(holder);
+        // Backport start - Rewrite registerShapelessRecipe method, different constructor in different MC version, RecipeHolder does not exist in MC 1.20.1
+        ShapelessRecipe recipe = new ShapelessRecipe(key, group, categoryValue, CraftItemStack.asNMSCopy(result), NonNullList.of(null, ingredientList.toArray(new Ingredient[0])));
+//        RecipeHolder<ShapelessRecipe> holder = new RecipeHolder<>(key, recipe);
+        ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().addRecipe(/*holder*/recipe);
+        // Backport end
     }
 
     @Override
@@ -198,7 +225,7 @@ public class ItemHelperImpl extends ItemHelper {
     @Override
     public String getRawHoverText(ItemStack itemStack) {
         // TODO: 1.20.6: this is relatively hot code, ideally should have some early returns before serializing the item
-        net.minecraft.nbt.Tag tag = CraftItemStack.asNMSCopy(itemStack).saveOptional(CraftRegistry.getMinecraftRegistry());
+        net.minecraft.nbt.Tag tag = CraftItemStack.asNMSCopy(itemStack)./*saveOptional(CraftRegistry.getMinecraftRegistry())*/getTag(); // Backport - Different way to do this in different MC version
         if (tag == null) {
             return null;
         }
@@ -208,6 +235,8 @@ public class ItemHelperImpl extends ItemHelper {
     @Override
     public PlayerProfile getSkullSkin(ItemStack is) {
         net.minecraft.world.item.ItemStack itemStack = CraftItemStack.asNMSCopy(is);
+        // Backport start - ResolvableProfile does not exist in MC 1.20.1
+        /*
         ResolvableProfile profile = itemStack.get(DataComponents.PROFILE);
         if (profile != null) {
             Property property = Iterables.getFirst(profile.properties().get("textures"), null);
@@ -215,24 +244,59 @@ public class ItemHelperImpl extends ItemHelper {
                     property != null ? property.value() : null,
                     property != null ? property.signature() : null);
         }
+        */
+        if (itemStack.hasTag()) {
+            net.minecraft.nbt.CompoundTag tag = itemStack.getTag();
+            if (tag.contains("SkullOwner", 10)) {
+                GameProfile profile = NbtUtils.readGameProfile(tag.getCompound("SkullOwner"));
+                if (profile != null) {
+                    Property property = Iterables.getFirst(profile.getProperties().get("textures"), null);
+                    return new PlayerProfile(profile.getName(), profile.getId(),
+                            property != null ? property.getValue() : null,
+                            property != null ? property.getSignature() : null);
+                }
+            }
+        }
+        // Backport end
         return null;
     }
 
     @Override
     public ItemStack setSkullSkin(ItemStack itemStack, PlayerProfile playerProfile) {
         GameProfile gameProfile = ProfileEditorImpl.getGameProfile(playerProfile);
+        // Backport start - Rewrite setSkullSkin method
+        if (playerProfile.hasTexture()) {
+            gameProfile.getProperties().get("textures").clear();
+            if (playerProfile.getTextureSignature() != null) {
+                gameProfile.getProperties().put("textures", new Property("textures", playerProfile.getTexture(), playerProfile.getTextureSignature()));
+            }
+            else {
+                gameProfile.getProperties().put("textures", new Property("textures", playerProfile.getTexture()));
+            }
+        }
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(itemStack);
-        nmsItemStack.set(DataComponents.PROFILE, new ResolvableProfile(gameProfile));
+//        nmsItemStack.set(DataComponents.PROFILE, new ResolvableProfile(gameProfile));
+        net.minecraft.nbt.CompoundTag tag = nmsItemStack.hasTag() ? nmsItemStack.getTag() : new net.minecraft.nbt.CompoundTag();
+        tag.put("SkullOwner", NbtUtils.writeGameProfile(new net.minecraft.nbt.CompoundTag(), gameProfile));
+        nmsItemStack.setTag(tag);
+        // Backport end
         return CraftItemStack.asBukkitCopy(nmsItemStack);
     }
 
     @Override
     public ItemStack addNbtData(ItemStack itemStack, String key, Tag value) {
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(itemStack);
+        // Backport start - Rewrite addNbtData method, data components do not exist in MC 1.20.1
+        /*
         nmsItemStack.update(DataComponents.CUSTOM_DATA, CustomData.EMPTY, customData -> {
             CompoundTag updatedTag = CompoundTagImpl.fromNMSTag(customData.getUnsafe()).createBuilder().put(key, value).build();
             return CustomData.of(((CompoundTagImpl) updatedTag).toNMSTag());
         });
+        */
+        net.minecraft.nbt.CompoundTag tag = nmsItemStack.hasTag() ? nmsItemStack.getTag() : new net.minecraft.nbt.CompoundTag();
+        CompoundTag compound = CompoundTagImpl.fromNMSTag(tag).createBuilder().put(key, value).build();
+        nmsItemStack.setTag(((CompoundTagImpl) compound).toNMSTag());
+        // Backport end
         return CraftItemStack.asBukkitCopy(nmsItemStack);
     }
 
@@ -242,7 +306,7 @@ public class ItemHelperImpl extends ItemHelper {
     public CompoundTag getNbtData(ItemStack itemStack) {
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(itemStack);
         if (nmsItemStack != null && !nmsItemStack.isEmpty()) {
-            return CompoundTagImpl.fromNMSTag((net.minecraft.nbt.CompoundTag) nmsItemStack.save(CraftRegistry.getMinecraftRegistry()));
+            return CompoundTagImpl.fromNMSTag((net.minecraft.nbt.CompoundTag) nmsItemStack.save(/*CraftRegistry.getMinecraftRegistry()*/new net.minecraft.nbt.CompoundTag())); // Backport - Different arguments in different MC version
         }
         return new CompoundTagImpl(new HashMap<>());
     }
@@ -250,10 +314,16 @@ public class ItemHelperImpl extends ItemHelper {
     // TODO: 1.20.6: same as getNbtData, ideally needs to only set custom NBT data and have specialized methods for other usages
     @Override
     public ItemStack setNbtData(ItemStack itemStack, CompoundTag compoundTag) {
-        net.minecraft.world.item.ItemStack nmsItemStack = net.minecraft.world.item.ItemStack.parseOptional(CraftRegistry.getMinecraftRegistry(), ((CompoundTagImpl) compoundTag).toNMSTag());
+        // Backport start - Rewrite setNbtData method, different way to do this in different MC version
+//        net.minecraft.world.item.ItemStack nmsItemStack = net.minecraft.world.item.ItemStack.parseOptional(CraftRegistry.getMinecraftRegistry(), ((CompoundTagImpl) compoundTag).toNMSTag());
+        net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(itemStack);
+        nmsItemStack.setTag(((CompoundTagImpl) compoundTag).toNMSTag());
+        // Backport end
         return CraftItemStack.asBukkitCopy(nmsItemStack);
     }
 
+    // Backport start - Data components do not exist in MC 1.20.1
+    /*
     @Override
     public CompoundTag getCustomData(ItemStack item) {
         CustomData customData = CraftItemStack.asNMSCopy(item).get(DataComponents.CUSTOM_DATA);
@@ -369,6 +439,8 @@ public class ItemHelperImpl extends ItemHelper {
         nmsItemStack.set(nmsComponent, new AdventureModePredicate(List.of(nmsPredicate), nmsAdventurePredicate == null || nmsAdventurePredicate.showInTooltip()));
         return CraftItemStack.asBukkitCopy(nmsItemStack);
     }
+    */
+    // Backport end
 
     @Override
     public void setInventoryItem(Inventory inventory, ItemStack item, int slot) {
@@ -396,8 +468,21 @@ public class ItemHelperImpl extends ItemHelper {
             return null;
         }
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item.getItemStack());
+        // Backport start - Data components do not exist in MC 1.20.1, different way to do this in different MC version
+        /*
         Component nmsDisplayName = nmsItemStack.get(DataComponents.CUSTOM_NAME);
         return FormattedTextHelper.stringify(Handler.componentToSpigot(nmsDisplayName));
+        */
+        String jsonText = ((net.minecraft.nbt.CompoundTag) nmsItemStack.getTag().get("display")).getString("Name");
+        try {
+            BaseComponent[] nameComponent = ComponentSerializer.parse(jsonText);
+            return FormattedTextHelper.stringify(nameComponent);
+        }
+        catch (Throwable ex) {
+            Debug.echoError(ex);
+            return null;
+        }
+        // Backport end
     }
 
     @Override
@@ -406,29 +491,61 @@ public class ItemHelperImpl extends ItemHelper {
             return null;
         }
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item.getItemStack());
+        // Backport start - Data components do not exist in MC 1.20.1, different way to do this in different MC version
+        /*
         ItemLore nmsLore = nmsItemStack.get(DataComponents.LORE);
         List<String> outList = new ArrayList<>(nmsLore.lines().size());
         for (Component nmsLoreLine : nmsLore.lines()) {
             outList.add(FormattedTextHelper.stringify(Handler.componentToSpigot(nmsLoreLine)));
         }
+        */
+        ListTag list = ((net.minecraft.nbt.CompoundTag) nmsItemStack.getTag().get("display")).getList("Lore", 8);
+        List<String> outList = new ArrayList<>();
+        for (int i = 0; i < list.size(); i++) {
+            try {
+                BaseComponent[] lineComponent = ComponentSerializer.parse(list.getString(i));
+                outList.add(FormattedTextHelper.stringify(lineComponent));
+            }
+            catch (Throwable ex) {
+                Debug.echoError(ex);
+            }
+        }
+        // Backport end
         return outList;
     }
 
     @Override
     public void setDisplayName(ItemTag item, String name) {
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item.getItemStack());
+        // Backport start - Data components do not exist in MC 1.20.1, different way to do this in different MC version
+        /*
         if (name == null || name.isEmpty()) {
             nmsItemStack.remove(DataComponents.CUSTOM_NAME);
         }
         else {
             nmsItemStack.set(DataComponents.CUSTOM_NAME, Handler.componentToNMS(FormattedTextHelper.parse(name, ChatColor.WHITE)));
         }
+        */
+        net.minecraft.nbt.CompoundTag tag = nmsItemStack.getOrCreateTag();
+        net.minecraft.nbt.CompoundTag display = tag.getCompound("display");
+        if (!tag.contains("display")) {
+            tag.put("display", display);
+        }
+        if (name == null || name.isEmpty()) {
+            display.put("Name", null);
+            return;
+        }
+        BaseComponent[] components = FormattedTextHelper.parse(name, ChatColor.WHITE);
+        display.put("Name", net.minecraft.nbt.StringTag.valueOf(FormattedTextHelper.componentToJson(components)));
+        // Backport end
         item.setItemStack(CraftItemStack.asBukkitCopy(nmsItemStack));
     }
 
     @Override
     public void setLore(ItemTag item, List<String> lore) {
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item.getItemStack());
+        // Backport start - Data components do not exist in MC 1.20.1, different way to do this in different MC version
+        /*
         if (lore == null || lore.isEmpty()) {
             nmsItemStack.remove(DataComponents.LORE);
         }
@@ -439,6 +556,26 @@ public class ItemHelperImpl extends ItemHelper {
             }
             nmsItemStack.set(DataComponents.LORE, new ItemLore(nmsLore));
         }
+        */
+        net.minecraft.nbt.CompoundTag tag = nmsItemStack.getOrCreateTag();
+        net.minecraft.nbt.CompoundTag display = tag.getCompound("display");
+        if (!tag.contains("display")) {
+            tag.put("display", display);
+        }
+        if (lore == null || lore.isEmpty()) {
+            display.remove("Lore");
+            if (display.isEmpty()) {
+                tag.remove("display");
+            }
+        }
+        else {
+            ListTag tagList = new ListTag();
+            for (String line : lore) {
+                tagList.add(net.minecraft.nbt.StringTag.valueOf(FormattedTextHelper.componentToJson(FormattedTextHelper.parse(line, ChatColor.WHITE))));
+            }
+            display.put("Lore", tagList);
+        }
+        // Backport end
         item.setItemStack(CraftItemStack.asBukkitCopy(nmsItemStack));
     }
 
@@ -548,7 +685,7 @@ public class ItemHelperImpl extends ItemHelper {
 
     @Override
     public boolean renderEntireMap(int mapId, int xMin, int zMin, int xMax, int zMax) {
-        MapItemSavedData worldmap = ((CraftServer) Bukkit.getServer()).getServer().getLevel(net.minecraft.world.level.Level.OVERWORLD).getMapData(new MapId(mapId));
+        MapItemSavedData worldmap = ((CraftServer) Bukkit.getServer()).getServer().getLevel(net.minecraft.world.level.Level.OVERWORLD).getMapData(/*new MapId*/("map_" + mapId)); // Backport - MapId does not exist in MC 1.20.1
         if (worldmap == null) {
             return false;
         }
@@ -570,7 +707,7 @@ public class ItemHelperImpl extends ItemHelper {
     public boolean isValidMix(ItemStack input, ItemStack ingredient) {
         net.minecraft.world.item.ItemStack nmsInput = CraftItemStack.asNMSCopy(input);
         net.minecraft.world.item.ItemStack nmsIngredient = CraftItemStack.asNMSCopy(ingredient);
-        return MinecraftServer.getServer().potionBrewing().hasMix(nmsInput, nmsIngredient);
+        return /*MinecraftServer.getServer().potionBrewing()*/PotionBrewing.hasMix(nmsInput, nmsIngredient); // Backport - Potion brewing methods was moved in newer MC version
     }
 
     public static Class<?> PaperPotionMix_CLASS = null;
@@ -579,12 +716,18 @@ public class ItemHelperImpl extends ItemHelper {
     @Override
     public Map<NamespacedKey, BrewingRecipe> getCustomBrewingRecipes() {
         if (customBrewingRecipes == null) {
-            customBrewingRecipes = Maps.transformValues((Map<NamespacedKey, ?>) ReflectionHelper.getFieldValue(PotionBrewing.class, "customMixes", MinecraftServer.getServer().potionBrewing()), paperMix -> {
+            customBrewingRecipes = Maps.transformValues((Map<NamespacedKey, ?>) ReflectionHelper.getFieldValue(PotionBrewing.class, /*"customMixes", MinecraftServer.getServer().potionBrewing()*/"CUSTOM_MIXES", null), paperMix -> { // Backport - Potion brewing code got moved in newer MC version
                 if (PaperPotionMix_CLASS == null) {
                     PaperPotionMix_CLASS = paperMix.getClass();
                 }
+                // Backport start - Newer API does not exist
+                /*
                 RecipeChoice ingredient = convertChoice(ReflectionHelper.getFieldValue(PaperPotionMix_CLASS, "ingredient", paperMix));
                 RecipeChoice input = convertChoice(ReflectionHelper.getFieldValue(PaperPotionMix_CLASS, "input", paperMix));
+                */
+                RecipeChoice ingredient = CraftRecipe.toBukkit(ReflectionHelper.getFieldValue(PaperPotionMix_CLASS, "ingredient", paperMix));
+                RecipeChoice input = CraftRecipe.toBukkit(ReflectionHelper.getFieldValue(PaperPotionMix_CLASS, "input", paperMix));
+                // Backport end
                 ItemStack result = CraftItemStack.asBukkitCopy(ReflectionHelper.getFieldValue(PaperPotionMix_CLASS, "result", paperMix));
                 return new BrewingRecipe(input, ingredient, result);
             });
@@ -592,6 +735,8 @@ public class ItemHelperImpl extends ItemHelper {
         return customBrewingRecipes;
     }
 
+    // Backport start - Newer API does not exist
+    /*
     private RecipeChoice convertChoice(Predicate<net.minecraft.world.item.ItemStack> nmsPredicate) {
         // Not an instance of net.minecraft.world.item.crafting.Ingredient = a predicate recipe choice
         if (nmsPredicate instanceof Ingredient ingredient) {
@@ -599,12 +744,16 @@ public class ItemHelperImpl extends ItemHelper {
         }
         return PaperAPITools.instance.createPredicateRecipeChoice(item -> nmsPredicate.test(CraftItemStack.asNMSCopy(item)));
     }
+    */
+    // Backport end
 
     @Override
     public byte[] renderMap(MapView mapView, Player player) {
         return ((CraftMapView) mapView).render((CraftPlayer) player).buffer;
     }
 
+    // Backport start - Data components do not exist in MC 1.20.1
+    /*
     @Override
     public int getFoodPoints(Material itemType) {
         return CraftMagicNumbers.getItem(itemType).components().get(DataComponents.FOOD).nutrition();
@@ -627,4 +776,6 @@ public class ItemHelperImpl extends ItemHelper {
         }
         return CraftItemStack.asBukkitCopy(nmsItemStack);
     }
+    */
+    // Backport end
 }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/PacketHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/PacketHelperImpl.java
index 213617f74b9eb0e45f64e643f5cce0c8dbc652d7..0de227eb9e4a4ebd15791e70f66d41705cc4bde1 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/PacketHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/PacketHelperImpl.java
@@ -18,10 +18,14 @@ import net.md_5.bungee.api.ChatColor;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket;
+// Backport start - Vanilla custom payloads was split out in MC 1.20.6 but not in MC 1.20.1
+import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
+/*
 import net.minecraft.network.protocol.common.custom.BrandPayload;
 import net.minecraft.network.protocol.common.custom.GameTestAddMarkerDebugPayload;
 import net.minecraft.network.protocol.common.custom.GameTestClearMarkersDebugPayload;
+*/
+// Backport end
 import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.SynchedEntityData;
@@ -346,21 +350,46 @@ public class PacketHelperImpl implements PacketHelper {
 
     @Override
     public void showDebugTestMarker(Player player, Location location, ColorTag color, String name, int time) {
+        // Backport start - Rewrite logic for sending custom payload
+        /*
         int colorInt = color.blue | (color.green << 8) | (color.red << 16) | (color.alpha << 24);
         GameTestAddMarkerDebugPayload payload = new GameTestAddMarkerDebugPayload(CraftLocation.toBlockPosition(location), colorInt, name, time);
         send(player, new ClientboundCustomPayloadPacket(payload));
+        */
+        net.minecraft.resources.ResourceLocation packetKey = ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_ADD_MARKER;
+        net.minecraft.network.FriendlyByteBuf buf = new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.buffer());
+        buf.writeBlockPos(CraftLocation.toBlockPosition(location));
+        int colorInt = color.blue | (color.green << 8) | (color.red << 16) | (color.alpha << 24);
+        buf.writeInt(colorInt);
+        buf.writeByteArray(name.getBytes(java.nio.charset.StandardCharsets.UTF_8));
+        buf.writeInt(time);
+        send(player, new ClientboundCustomPayloadPacket(packetKey, buf));
+        // Backport end
     }
 
     @Override
     public void clearDebugTestMarker(Player player) {
+        // Backport start - Rewrite logic for sending custom payload
+        /*
         GameTestClearMarkersDebugPayload payload = new GameTestClearMarkersDebugPayload();
         send(player, new ClientboundCustomPayloadPacket(payload));
+        */
+        net.minecraft.resources.ResourceLocation packetKey = ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_CLEAR;
+        net.minecraft.network.FriendlyByteBuf buf = new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.buffer());
+        send(player, new ClientboundCustomPayloadPacket(packetKey, buf));
+        // Backport end
     }
 
     @Override
     public void sendBrand(Player player, String brand) {
+        // Backport - Rewrite logic for sending custom payload
+        /*
         BrandPayload payload = new BrandPayload(brand);
         send(player, new ClientboundCustomPayloadPacket(payload));
+        */
+        send(player, new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND,
+                new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.buffer()).writeUtf(brand)));
+        // Backport end
     }
 
     @Override
@@ -426,6 +455,6 @@ public class PacketHelperImpl implements PacketHelper {
     }
 
     public static <T> SynchedEntityData.DataValue<T> createEntityData(EntityDataAccessor<T> accessor, T value) {
-        return new SynchedEntityData.DataValue<>(accessor.id(), accessor.serializer(), value);
+        return new SynchedEntityData.DataValue<>(accessor.getId(), accessor.getSerializer(), value); // Backport - Refactored class
     }
 }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/PlayerHelperImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/PlayerHelperImpl.java
index 41f08364d0d03da1e7fe2c5c5171c8d05a91efe5..278391efab4a48fb5d3f7c639c408fb4c519a751 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/PlayerHelperImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/helpers/PlayerHelperImpl.java
@@ -30,7 +30,7 @@ import net.md_5.bungee.api.ChatColor;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.network.protocol.common.ClientboundUpdateTagsPacket;
+// import net.minecraft.network.protocol.common.ClientboundUpdateTagsPacket; // Backport - Packets was moved in newer MC version
 import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.resources.ResourceKey;
@@ -50,7 +50,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemCooldowns;
-import net.minecraft.world.item.crafting.RecipeHolder;
+import net.minecraft.world.item.crafting.Recipe/*Holder*/; // Backport - RecipeHolder does not exist in MC 1.20.1
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
@@ -164,7 +164,7 @@ public class PlayerHelperImpl extends PlayerHelper {
             }
         }
         else {
-            org.bukkit.entity.Entity entity = world.createEntity(location, entityType.getBukkitEntityType().getEntityClass());
+            org.bukkit.entity.Entity entity = world.createEntity(location, entityType.getBukkitEntityType().getEntityClass()).getBukkitEntity(); // Backport - Different return type in different MC version
             nmsEntity = ((CraftEntity) entity).getHandle();
         }
         if (customUUID != null) {
@@ -331,7 +331,7 @@ public class PlayerHelperImpl extends PlayerHelper {
 
     @Override
     public void resendRecipeDetails(Player player) {
-        Collection<RecipeHolder<?>> recipes = ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().getRecipes();
+        Collection<Recipe/*Holder*/<?>> recipes = ((CraftServer) Bukkit.getServer()).getServer().getRecipeManager().getRecipes(); // Backport - RecipeHolder does not exist in MC 1.20.1
         ClientboundUpdateRecipesPacket updatePacket = new ClientboundUpdateRecipesPacket(recipes);
         ((CraftPlayer) player).getHandle().connection.send(updatePacket);
     }
@@ -345,7 +345,7 @@ public class PlayerHelperImpl extends PlayerHelper {
     @Override
     public void quietlyAddRecipe(Player player, NamespacedKey key) {
         ServerRecipeBook recipeBook = ((CraftPlayer) player).getHandle().getRecipeBook();
-        RecipeHolder<?> recipe = ItemHelperImpl.getNMSRecipe(key);
+        Recipe/*Holder*/<?> recipe = ItemHelperImpl.getNMSRecipe(key); // Backport - RecipeHolder does not exist in MC 1.20.1
         if (recipe == null) {
             Debug.echoError("Cannot add recipe '" + key + "': it does not exist.");
             return;
@@ -446,7 +446,20 @@ public class PlayerHelperImpl extends PlayerHelper {
     public void refreshPlayer(Player player) {
         ServerPlayer nmsPlayer = ((CraftPlayer) player).getHandle();
         ServerLevel nmsWorld = (ServerLevel) nmsPlayer.level();
-        nmsPlayer.connection.send(new ClientboundRespawnPacket(nmsPlayer.createCommonSpawnInfo(nmsWorld), ClientboundRespawnPacket.KEEP_ALL_DATA));
+        // Backport start - Respawn packet was refactored in newer MC version
+//        nmsPlayer.connection.send(new ClientboundRespawnPacket(nmsPlayer.createCommonSpawnInfo(nmsWorld), ClientboundRespawnPacket.KEEP_ALL_DATA));
+        nmsPlayer.connection.send(new ClientboundRespawnPacket(
+                nmsWorld.dimensionTypeId(),
+                nmsWorld.dimension(),
+                net.minecraft.world.level.biome.BiomeManager.obfuscateSeed(nmsWorld.getSeed()),
+                nmsPlayer.gameMode.getGameModeForPlayer(),
+                nmsPlayer.gameMode.getPreviousGameModeForPlayer(),
+                nmsWorld.isDebug(),
+                nmsWorld.isFlat(),
+                ClientboundRespawnPacket.KEEP_ALL_DATA,
+                nmsPlayer.getLastDeathLocation(),
+                nmsPlayer.getPortalCooldown()));
+        // Backport end
         nmsPlayer.connection.teleport(player.getLocation());
         if (nmsPlayer.isPassenger()) {
            nmsPlayer.connection.send(new ClientboundSetPassengersPacket(nmsPlayer.getVehicle()));
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/BiomeNMSImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/BiomeNMSImpl.java
index 6400c6038c97dbb2274491ae52f7476f81aea4aa..998c3d64813fc7dc98eadf15500faafbd08655c0 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/BiomeNMSImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/BiomeNMSImpl.java
@@ -20,7 +20,7 @@ import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.v1_20_R1.CraftWorld;
-import org.bukkit.craftbukkit.v1_20_R1.entity.CraftEntityType;
+//import org.bukkit.craftbukkit.v1_20_R1.entity.CraftEntityType; // Backport - This does not exist in MC 1.20.1
 import org.bukkit.craftbukkit.v1_20_R1.util.CraftLocation;
 import org.bukkit.craftbukkit.v1_20_R1.util.CraftNamespacedKey;
 import org.bukkit.entity.EntityType;
@@ -168,7 +168,20 @@ public class BiomeNMSImpl extends BiomeNMS {
             return entityTypes;
         }
         for (MobSpawnSettings.SpawnerData meta : typeSettingList.unwrap()) {
-            entityTypes.add(CraftEntityType.minecraftToBukkit(meta.type));
+            // Backport start - CraftEntityType does not exist in MC 1.20.1
+//            entityTypes.add(CraftEntityType.minecraftToBukkit(meta.type));
+            try {
+                String n = net.minecraft.world.entity.EntityType.getKey(meta.type).getPath();
+                EntityType et = EntityType.fromName(n);
+                if (et == null) {
+                    et = EntityType.valueOf(n.toUpperCase(java.util.Locale.ENGLISH));
+                }
+                entityTypes.add(et);
+            }
+            catch (Throwable e) {
+                // Ignore the error. Likely from invalid entity type name output.
+            }
+            // Backport end
         }
         return entityTypes;
     }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/ImprovedOfflinePlayerImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/ImprovedOfflinePlayerImpl.java
index 5b772caf224f7d7fdc87a764fde4ad347ab95144..15beb15fed81d013ce1e3de1ea3b9cc85d9c82d2 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/ImprovedOfflinePlayerImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/ImprovedOfflinePlayerImpl.java
@@ -78,7 +78,7 @@ public class ImprovedOfflinePlayerImpl extends ImprovedOfflinePlayer {
     public Inventory getEnderChest() {
         if (enderchest == null) {
             PlayerEnderChestContainer endchest = new PlayerEnderChestContainer(null);
-            endchest.fromTag(((CompoundTagImpl) this.compound).toNMSTag().getList("EnderItems", 10), CraftRegistry.getMinecraftRegistry());
+            endchest.fromTag(((CompoundTagImpl) this.compound).toNMSTag().getList("EnderItems", 10)/*, CraftRegistry.getMinecraftRegistry()*/); // Backport - Different arguments in different MC version
             enderchest = new CraftInventory(endchest);
         }
         return enderchest;
@@ -87,7 +87,7 @@ public class ImprovedOfflinePlayerImpl extends ImprovedOfflinePlayer {
     @Override
     public void setEnderChest(Inventory inventory) {
         net.minecraft.nbt.CompoundTag nbtTagCompound = ((CompoundTagImpl) compound).toNMSTag();
-        nbtTagCompound.put("EnderItems", ((PlayerEnderChestContainer) ((CraftInventory) inventory).getInventory()).createTag(CraftRegistry.getMinecraftRegistry()));
+        nbtTagCompound.put("EnderItems", ((PlayerEnderChestContainer) ((CraftInventory) inventory).getInventory()).createTag(/*CraftRegistry.getMinecraftRegistry()*/)); // Backport - Different arguments in different MC version
         this.compound = CompoundTagImpl.fromNMSTag(nbtTagCompound);
         markModified();
     }
@@ -95,7 +95,7 @@ public class ImprovedOfflinePlayerImpl extends ImprovedOfflinePlayer {
     @Override
     public double getMaxHealth() {
         AttributeInstance maxHealth = getAttributes().getInstance(Attributes.MAX_HEALTH);
-        return maxHealth == null ? Attributes.MAX_HEALTH.value().getDefaultValue() : maxHealth.getValue();
+        return maxHealth == null ? Attributes.MAX_HEALTH/*.value()*/.getDefaultValue() : maxHealth.getValue(); // Backport - Holders does not exist in MC 1.20.1
     }
 
     @Override
@@ -126,7 +126,7 @@ public class ImprovedOfflinePlayerImpl extends ImprovedOfflinePlayer {
             for (org.bukkit.World w : Bukkit.getWorlds()) {
                 this.file = new File(w.getWorldFolder(), "playerdata" + File.separator + this.player + ".dat");
                 if (this.file.exists()) {
-                    this.compound = CompoundTagImpl.fromNMSTag(NbtIo.readCompressed(new FileInputStream(this.file), NbtAccounter.unlimitedHeap()));
+                    this.compound = CompoundTagImpl.fromNMSTag(NbtIo.readCompressed(new FileInputStream(this.file)/*, NbtAccounter.unlimitedHeap()*/)); // Backport - Different arguments in different MC version
                     return true;
                 }
             }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/SidebarImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/SidebarImpl.java
index ed33d38f76888ada5795016e1c3fa6f9c0d0ee72..1e3e3cd11de5c5b74d42c4b2e6625a34654578aa 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/SidebarImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/SidebarImpl.java
@@ -8,12 +8,13 @@ import com.denizenscript.denizencore.utilities.debugging.Debug;
 import net.md_5.bungee.api.ChatColor;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
-import net.minecraft.network.chat.numbers.StyledFormat;
+//import net.minecraft.network.chat.numbers.StyledFormat; // Backport - This does not exist in MC 1.20.1
 import net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket;
 import net.minecraft.network.protocol.game.ClientboundSetObjectivePacket;
 import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
 import net.minecraft.network.protocol.game.ClientboundSetScorePacket;
-import net.minecraft.world.scores.DisplaySlot;
+import net.minecraft.server.ServerScoreboard;
+//import net.minecraft.world.scores.DisplaySlot; // Backport - This does not exist in MC 1.20.1
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
@@ -49,8 +50,10 @@ public class SidebarImpl extends Sidebar {
     public SidebarImpl(Player player) {
         super(player);
         Component chatComponentTitle = Handler.componentToNMS(FormattedTextHelper.parse(title, ChatColor.WHITE));
-        this.obj1 = new Objective(dummyScoreboard, "dummy_1", dummyCriteria, chatComponentTitle, ObjectiveCriteria.RenderType.INTEGER, false, StyledFormat.SIDEBAR_DEFAULT);
-        this.obj2 = new Objective(dummyScoreboard, "dummy_2", dummyCriteria, chatComponentTitle, ObjectiveCriteria.RenderType.INTEGER, false, StyledFormat.SIDEBAR_DEFAULT);
+        // Backport start - Different arguments in different MC version
+        this.obj1 = new Objective(dummyScoreboard, "dummy_1", dummyCriteria, chatComponentTitle, ObjectiveCriteria.RenderType.INTEGER/*, false, StyledFormat.SIDEBAR_DEFAULT*/);
+        this.obj2 = new Objective(dummyScoreboard, "dummy_2", dummyCriteria, chatComponentTitle, ObjectiveCriteria.RenderType.INTEGER/*, false, StyledFormat.SIDEBAR_DEFAULT*/);
+        // Backport end
     }
 
     @Override
@@ -81,9 +84,12 @@ public class SidebarImpl extends Sidebar {
             team.setPlayerPrefix(Handler.componentToNMS(FormattedTextHelper.parse(line, ChatColor.WHITE)));
             generatedTeams.add(team);
             PacketHelperImpl.send(player, ClientboundSetPlayerTeamPacket.createAddOrModifyPacket(team, true));
-            PacketHelperImpl.send(player, new ClientboundSetScorePacket(lineId, obj1.getName(), this.scores[i], Optional.empty(), Optional.of(StyledFormat.SIDEBAR_DEFAULT)));
+            // Backport start - Different arguments in different MC version
+//            PacketHelperImpl.send(player, new ClientboundSetScorePacket(lineId, obj1.getName(), this.scores[i], Optional.empty(), Optional.of(StyledFormat.SIDEBAR_DEFAULT)));
+            PacketHelperImpl.send(player, new ClientboundSetScorePacket(ServerScoreboard.Method.CHANGE, obj1.getName(), lineId, this.scores[i]));
+            // Backport end
         }
-        PacketHelperImpl.send(player, new ClientboundSetDisplayObjectivePacket(DisplaySlot.SIDEBAR, this.obj1));
+        PacketHelperImpl.send(player, new ClientboundSetDisplayObjectivePacket(/*DisplaySlot.SIDEBAR*/1, this.obj1)); // Backport - Different arguments in different MC version
         PacketHelperImpl.send(player, new ClientboundSetObjectivePacket(this.obj2, 1));
         Objective temp = this.obj2;
         this.obj2 = this.obj1;
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/blocks/BlockLightImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/blocks/BlockLightImpl.java
index 5307e9fc47a217ca80043e330cf0b0c163ecbb9c..ebecb2328602a1b37570a915adcd7b4305e1366a 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/blocks/BlockLightImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/blocks/BlockLightImpl.java
@@ -16,7 +16,7 @@ import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.DataLayer;
 import net.minecraft.world.level.chunk.LevelChunk;
-import net.minecraft.world.level.chunk.status.ChunkStatus;
+import net.minecraft.world.level.chunk.ChunkStatus; // Backport - Moved class
 import net.minecraft.world.level.lighting.LayerLightEventListener;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import org.bukkit.Bukkit;
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/CraftFakeArrowImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/CraftFakeArrowImpl.java
index f6570aea104fdd1be2c66a57bcf2a00f83543fae..d320ccfa304be2fd38f6950f97fd5a63286b3bba 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/CraftFakeArrowImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/CraftFakeArrowImpl.java
@@ -3,10 +3,13 @@ package com.denizenscript.denizen.nms.v1_20.impl.entities;
 import com.denizenscript.denizen.nms.interfaces.FakeArrow;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import org.bukkit.craftbukkit.v1_20_R1.CraftServer;
-import org.bukkit.craftbukkit.v1_20_R1.entity.CraftAbstractArrow;
+//import org.bukkit.craftbukkit.v1_20_R1.entity.CraftAbstractArrow; // Backport - This does not exist in MC 1.20.1
 import org.bukkit.craftbukkit.v1_20_R1.entity.CraftArrow;
 
-public class CraftFakeArrowImpl extends CraftAbstractArrow implements FakeArrow {
+// Backport start - CraftAbstractArrow does not exist in MC 1.20.1
+//public class CraftFakeArrowImpl extends CraftAbstractArrow implements FakeArrow {
+public class CraftFakeArrowImpl extends CraftArrow implements FakeArrow {
+// Backport end
 
     public CraftFakeArrowImpl(CraftServer craftServer, AbstractArrow entityArrow) {
         super(craftServer, entityArrow);
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/CraftItemProjectileImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/CraftItemProjectileImpl.java
index 2b3f458091ad9d4d1470a4c72f08058c272483ee..32900071e7359e2a0a4b1a79347710e5659aee99 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/CraftItemProjectileImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/CraftItemProjectileImpl.java
@@ -22,7 +22,7 @@ public class CraftItemProjectileImpl extends CraftEntity implements ItemProjecti
         MethodHandle handle = ReflectionHelper.getFinalSetterForFirstOfType(CraftEntity.class, EntityType.class);
         if (handle != null) {
             try {
-                handle.invoke(this, EntityType.ITEM);
+                handle.invoke(this, EntityType.DROPPED_ITEM); // Backport - Renamed enum constant, ITEM -> DROPPED_ITEM
             }
             catch (Throwable ex) {
                 Debug.echoError(ex);
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/EntityFakePlayerImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/EntityFakePlayerImpl.java
index c997629686a5f3565f1613852482211c7e7805a2..ea939d644cce6e1d80e4a4bdc6e279db97af48d9 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/EntityFakePlayerImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/EntityFakePlayerImpl.java
@@ -9,10 +9,10 @@ import com.denizenscript.denizencore.utilities.debugging.Debug;
 import net.minecraft.network.Connection;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.level.ClientInformation;
+//import net.minecraft.server.level.ClientInformation; // Backport - ClientInformation does not exist in MC 1.20.1
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.ServerLevel;
-import net.minecraft.server.network.CommonListenerCookie;
+//import net.minecraft.server.network.CommonListenerCookie; // Backport - Cookie does not exist in MC 1.20.1
 import net.minecraft.world.entity.player.Player;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.v1_20_R1.CraftServer;
@@ -20,13 +20,18 @@ import org.bukkit.event.entity.CreatureSpawnEvent;
 
 public class EntityFakePlayerImpl extends ServerPlayer {
 
-    public EntityFakePlayerImpl(MinecraftServer minecraftserver, ServerLevel worldserver, GameProfile gameprofile, ClientInformation clientInfo, boolean doAdd) {
-        super(minecraftserver, worldserver, gameprofile, clientInfo);
+    // Backport start - ClientInformation does not exist in MC 1.20.1
+    public EntityFakePlayerImpl(MinecraftServer minecraftserver, ServerLevel worldserver, GameProfile gameprofile/*, ClientInformation clientInfo*/, boolean doAdd) {
+        super(minecraftserver, worldserver, gameprofile/*, clientInfo*/);
+    // Backport end
         try {
             Handler.ENTITY_BUKKITYENTITY.set(this, new CraftFakePlayerImpl((CraftServer) Bukkit.getServer(), this));
             Connection networkManager = new FakeNetworkManagerImpl(PacketFlow.CLIENTBOUND);
-            connection = new FakePlayerConnectionImpl(minecraftserver, networkManager, this, new CommonListenerCookie(gameprofile, 0, clientInfo, false));
-            DenizenNetworkManagerImpl.Connection_packetListener.set(networkManager, connection);
+            connection = new FakePlayerConnectionImpl(minecraftserver, networkManager, this/*, new CommonListenerCookie(gameprofile, 0, clientInfo, false)*/); // Backport - Cookie does not exist in MC 1.20.1
+            // Backport start - Rewrite packet listener initialization
+//            DenizenNetworkManagerImpl.Connection_packetListener.set(networkManager, connection);
+            networkManager.setListener(connection);
+            // Backport end
         }
         catch (Exception ex) {
             Debug.echoError(ex);
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/EntityItemProjectileImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/EntityItemProjectileImpl.java
index dccb5fabd0501de45520ef2ca824e89fae31f981..30787fdfa71a0220f4f6959059085e6784c2eccd 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/EntityItemProjectileImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/entities/EntityItemProjectileImpl.java
@@ -48,10 +48,17 @@ public class EntityItemProjectileImpl extends ThrowableProjectile {
         setItemStack(item);
     }
 
+    // Backport - Rewrite synched data define logic
     @Override
+    /*
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         builder.define(ITEM, ItemStack.EMPTY);
     }
+    */
+    protected void defineSynchedData() {
+        getEntityData().define(ITEM, ItemStack.EMPTY);
+    }
+    // Backport end
 
     public ItemStack getItemStack() {
         return this.getEntityData().get(ITEM);
@@ -80,7 +87,7 @@ public class EntityItemProjectileImpl extends ThrowableProjectile {
     @Override
     public boolean save(net.minecraft.nbt.CompoundTag nbttagcompound) {
         if (!this.getItemStack().isEmpty()) {
-            nbttagcompound.put("Item", this.getItemStack().save(CraftRegistry.getMinecraftRegistry()));
+            nbttagcompound.put("Item", this.getItemStack().save(/*CraftRegistry.getMinecraftRegistry()*/new net.minecraft.nbt.CompoundTag())); // Backport - Rewrite item saver
         }
         super.save(nbttagcompound);
         return true;
@@ -89,7 +96,10 @@ public class EntityItemProjectileImpl extends ThrowableProjectile {
     @Override
     public void load(net.minecraft.nbt.CompoundTag nbttagcompound) {
         net.minecraft.nbt.CompoundTag nbttagcompound1 = nbttagcompound.getCompound("Item");
-        this.setItemStack(ItemStack.parseOptional(CraftRegistry.getMinecraftRegistry(), nbttagcompound1));
+        // Backport start - Rewrite item stack loader
+//        this.setItemStack(ItemStack.parseOptional(CraftRegistry.getMinecraftRegistry(), nbttagcompound1));
+        this.setItemStack(ItemStack.of(nbttagcompound1));
+        // Backport end
         if (this.getItemStack().isEmpty()) {
             this.remove(RemovalReason.KILLED);
         }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/fakes/FakePlayerConnectionImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/fakes/FakePlayerConnectionImpl.java
index dcc1321deed9b4b9c6a27e5bd8382e5c0653f92c..e297f52d3867d410b8806a2fa8df7e53ce696173 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/fakes/FakePlayerConnectionImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/fakes/FakePlayerConnectionImpl.java
@@ -4,13 +4,15 @@ import net.minecraft.network.Connection;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.network.CommonListenerCookie;
+//import net.minecraft.server.network.CommonListenerCookie; // Backport - Cookie does not exist in MC 1.20.1
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 
 public class FakePlayerConnectionImpl extends ServerGamePacketListenerImpl {
 
-    public FakePlayerConnectionImpl(MinecraftServer minecraftserver, Connection networkmanager, ServerPlayer entityplayer, CommonListenerCookie cookie) {
-        super(minecraftserver, networkmanager, entityplayer, cookie);
+    // Backport start - Cookie does not exist in MC 1.20.1
+    public FakePlayerConnectionImpl(MinecraftServer minecraftserver, Connection networkmanager, ServerPlayer entityplayer/*, CommonListenerCookie cookie*/) {
+        super(minecraftserver, networkmanager, entityplayer/*, cookie*/);
+    // Backport end
     }
 
     @Override
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/AbstractListenerPlayInImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/AbstractListenerPlayInImpl.java
index 78b3be04f0ba9be4bdcfea065f57405f5371fee8..ec0ae8c87ed310559d1fa872d9cf0d07a0f59320 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/AbstractListenerPlayInImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/AbstractListenerPlayInImpl.java
@@ -13,11 +13,11 @@ import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
-import net.minecraft.network.protocol.common.*;
+//import net.minecraft.network.protocol.common.*; // Backport - Packets was moved in MC 1.20.6 but not in MC 1.20.1
 import net.minecraft.network.protocol.game.*;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.network.CommonListenerCookie;
+//import net.minecraft.server.network.CommonListenerCookie; // Backport - Cookie does not exist in MC 1.20.1
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.world.entity.RelativeMovement;
 import net.minecraft.world.phys.Vec3;
@@ -32,21 +32,27 @@ import java.util.Set;
 public class AbstractListenerPlayInImpl extends ServerGamePacketListenerImpl {
     // TODO: 1.20.6: there are some new methods that should potentially be overriden
 
-    public static final Field ServerGamePacketListenerImpl_chunkSender = ReflectionHelper.getFields(ServerGamePacketListenerImpl.class).get(ReflectionMappingsInfo.ServerGamePacketListenerImpl_chunkSender);
+//    public static final Field ServerGamePacketListenerImpl_chunkSender = ReflectionHelper.getFields(ServerGamePacketListenerImpl.class).get(ReflectionMappingsInfo.ServerGamePacketListenerImpl_chunkSender); // Backport - chunkSender does not exist in MC 1.20.1
 
     public final ServerGamePacketListenerImpl oldListener;
     public final DenizenNetworkManagerImpl denizenNetworkManager;
 
-    public AbstractListenerPlayInImpl(DenizenNetworkManagerImpl networkManager, ServerPlayer entityPlayer, ServerGamePacketListenerImpl oldListener, CommonListenerCookie cookie) {
-        super(MinecraftServer.getServer(), networkManager, entityPlayer, cookie);
+    // Backport start - Cookie does not exist in MC 1.20.1
+    public AbstractListenerPlayInImpl(DenizenNetworkManagerImpl networkManager, ServerPlayer entityPlayer, ServerGamePacketListenerImpl oldListener/*, CommonListenerCookie cookie*/) {
+        super(MinecraftServer.getServer(), networkManager, entityPlayer/*, cookie*/);
+    // Backport end
         this.oldListener = oldListener;
         this.denizenNetworkManager = networkManager;
+        // Backport start - chunkSender does not exist in MC 1.20.1
+        /*
         try {
             ServerGamePacketListenerImpl_chunkSender.set(this, oldListener.chunkSender);
         }
         catch (IllegalAccessException e) {
             Debug.echoError(e);
         }
+        */
+        // Backport end
     }
 
     @Override
@@ -104,6 +110,8 @@ public class AbstractListenerPlayInImpl extends ServerGamePacketListenerImpl {
         return oldListener.isAcceptingMessages();
     }
 
+    // Backport - Newer methods do not exist
+    /*
     @Override
     public GameProfile getOwner() {
         return oldListener.getOwner();
@@ -113,6 +121,8 @@ public class AbstractListenerPlayInImpl extends ServerGamePacketListenerImpl {
     public int latency() {
         return oldListener.latency();
     }
+    */
+    // Backport end
 
     @Override
     public void onDisconnect(Component ichatbasecomponent) {
@@ -320,6 +330,8 @@ public class AbstractListenerPlayInImpl extends ServerGamePacketListenerImpl {
         oldListener.handleResourcePackResponse(packet);
     }
 
+    // Backport start - Newer methods do not exist
+    /*
     @Override
     public void suspendFlushing() {
         oldListener.suspendFlushing();
@@ -329,6 +341,8 @@ public class AbstractListenerPlayInImpl extends ServerGamePacketListenerImpl {
     public void resumeFlushing() {
         oldListener.resumeFlushing();
     }
+    */
+    // Backport end
 
     @Override
     public void handlePaddleBoat(ServerboundPaddleBoatPacket packet) {
@@ -365,10 +379,14 @@ public class AbstractListenerPlayInImpl extends ServerGamePacketListenerImpl {
         oldListener.chat(s, original, async);
     }
 
+    // Backport start - Newer methods do not exist
+    /*
     @Override
     public ConnectionProtocol protocol() {
         return oldListener == null ? ConnectionProtocol.PLAY : oldListener.protocol();
     }
+    */
+    // Backport end
 
     @Override
     public void handleAnimate(ServerboundSwingPacket packet) {
@@ -407,10 +425,14 @@ public class AbstractListenerPlayInImpl extends ServerGamePacketListenerImpl {
         return oldListener.getRawAddress();
     }
 
+    // Backport start - Newer methods do not exist
+    /*
     @Override
     public void switchToConfig() {
         oldListener.switchToConfig();
     }
+    */
+    // Backport end
 
     @Override
     public void handleInteract(ServerboundInteractPacket packet) {
@@ -502,6 +524,8 @@ public class AbstractListenerPlayInImpl extends ServerGamePacketListenerImpl {
         oldListener.handleChatSessionUpdate(packet);
     }
 
+    // Backport - Networking stages are split out in MC 1.20.6 but not in MC 1.20.1
+    /*
     @Override
     public void handleConfigurationAcknowledged(ServerboundConfigurationAcknowledgedPacket packet) {
         if (handlePacketIn(packet)) { return; }
@@ -513,14 +537,20 @@ public class AbstractListenerPlayInImpl extends ServerGamePacketListenerImpl {
         if (handlePacketIn(packet)) { return; }
         oldListener.handleChunkBatchReceived(packet);
     }
+    */
+    // Backport end
 
     @Override
     public ServerPlayer getPlayer() {
         return oldListener.getPlayer();
     }
 
+    // Backport start - Newer methods do not exist
+    /*
     @Override
     public PacketFlow flow() {
         return oldListener == null ? PacketFlow.SERVERBOUND : oldListener.flow();
     }
+    */
+    // Backport end
 }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/DenizenNetworkManagerImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/DenizenNetworkManagerImpl.java
index 50563b391b13bb614a67e0dd748a57d5face6b64..0675bee5a68683c13740ad9aed5026bbae86ce5e 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/DenizenNetworkManagerImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/DenizenNetworkManagerImpl.java
@@ -15,17 +15,17 @@ import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPipeline;
 import net.minecraft.network.*;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.codec.StreamCodec;
+//import net.minecraft.network.codec.StreamCodec; // Backport - StreamCodec does not exist in MC 1.20.1
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
-import net.minecraft.network.protocol.configuration.ServerConfigurationPacketListener;
+//import net.minecraft.network.protocol.configuration.ServerConfigurationPacketListener; // Backport - Networking stages are split out in MC 1.20.6 but not in MC 1.20.1
 import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.protocol.login.ClientLoginPacketListener;
 import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.network.ServerCommonPacketListenerImpl;
+//import net.minecraft.server.network.ServerCommonPacketListenerImpl; // Backport - This does not exist in MC 1.20.1
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.server.network.ServerPlayerConnection;
 import org.bukkit.Bukkit;
@@ -52,6 +52,8 @@ public class DenizenNetworkManagerImpl extends Connection {
     // TODO: 1.20.6: there are some new methods that should potentially be overriden
 
     // TODO: 1.20.6: this can be cleaned up by decoding with the codec and returning the new packet
+    // Backport start - Rewrite packet copy logic
+    /*
     public static <T extends Packet<?>, B extends FriendlyByteBuf> RegistryFriendlyByteBuf copyPacket(T original, StreamCodec<B, T> packetCodec) {
         try {
             RegistryFriendlyByteBuf copier = new RegistryFriendlyByteBuf(Unpooled.buffer(), CraftRegistry.getMinecraftRegistry());
@@ -63,6 +65,19 @@ public class DenizenNetworkManagerImpl extends Connection {
             return null;
         }
     }
+    */
+    public static FriendlyByteBuf copyPacket(Packet<?> original) {
+        try {
+            FriendlyByteBuf copier = new FriendlyByteBuf(Unpooled.buffer());
+            original.write(copier);
+            return copier;
+        }
+        catch (Throwable ex) {
+            Debug.echoError(ex);
+            return null;
+        }
+    }
+    // Backport end
 
     @FunctionalInterface
     public interface PacketHandler<T extends Packet<ClientGamePacketListener>> {
@@ -93,12 +108,17 @@ public class DenizenNetworkManagerImpl extends Connection {
         this.channel = oldManager.channel;
         this.player = entityPlayer;
         packetListener = (DenizenPacketListenerImpl) NetworkInterceptCodeGen.generateAppropriateInterceptor(this, entityPlayer, DenizenPacketListenerImpl.class, AbstractListenerPlayInImpl.class, ServerGamePacketListenerImpl.class);
+    // Backport start - Rewrite set listener logic
+        /*
         if (!(oldManager.getPacketListener() instanceof ServerConfigurationPacketListener)) {
             setListener(packetListener);
         }
+        */
+        oldManager.setListener(packetListener);
     }
 
     public void setListener(PacketListener listener) {
+        /*
         try {
             Connection_packetListener.set(oldManager, listener);
         }
@@ -106,7 +126,10 @@ public class DenizenNetworkManagerImpl extends Connection {
             Debug.echoError(e);
             throw new RuntimeException("Failed to set packet listener due to reflection error", e);
         }
+        */
+        oldManager.setListener(listener);
     }
+    // Backport end
 
     public static Connection getConnection(ServerPlayer player) {
         try {
@@ -210,6 +233,8 @@ public class DenizenNetworkManagerImpl extends Connection {
         }
     }
 
+    // Backport start - Newer methods do not exist in MC 1.20.1
+    /*
     @Override
     public void setListenerForServerboundHandshake(PacketListener packetlistener) {
         oldManager.setListenerForServerboundHandshake(packetlistener);
@@ -224,6 +249,8 @@ public class DenizenNetworkManagerImpl extends Connection {
     public void initiateServerboundPlayConnection(String s, int i, ClientLoginPacketListener packetloginoutlistener) {
         oldManager.initiateServerboundPlayConnection(s, i, packetloginoutlistener);
     }
+    */
+    // Backport end
 
     @Override
     public void send(Packet<?> packet) {
@@ -266,7 +293,7 @@ public class DenizenNetworkManagerImpl extends Connection {
         }
         else if (packet instanceof ClientboundMapItemDataPacket) {
             ClientboundMapItemDataPacket mapPacket = (ClientboundMapItemDataPacket) packet;
-            doPacketOutput("Packet: ClientboundMapItemDataPacket sent to " + player.getScoreboardName() + " for map ID: " + mapPacket.mapId() + ", scale: " + mapPacket.scale() + ", locked: " + mapPacket.locked());
+            doPacketOutput("Packet: ClientboundMapItemDataPacket sent to " + player.getScoreboardName() + " for map ID: " + mapPacket.getMapId() + ", scale: " + mapPacket.getScale() + ", locked: " + mapPacket.isLocked()); // Backport - Refactored class
         }
         else if (packet instanceof ClientboundRemoveEntitiesPacket) {
             ClientboundRemoveEntitiesPacket removePacket = (ClientboundRemoveEntitiesPacket) packet;
@@ -276,7 +303,7 @@ public class DenizenNetworkManagerImpl extends Connection {
             ClientboundPlayerInfoUpdatePacket playerInfoPacket = (ClientboundPlayerInfoUpdatePacket) packet;
             doPacketOutput("Packet: ClientboundPlayerInfoPacket sent to " + player.getScoreboardName() + " of types " + playerInfoPacket.actions() + " for player profiles: " +
                     playerInfoPacket.entries().stream().map(p -> "mode=" + p.gameMode() + "/latency=" + p.latency() + "/display=" + p.displayName() + "/name=" + p.profile().getName() + "/id=" + p.profile().getId() + "/"
-                            + p.profile().getProperties().asMap().entrySet().stream().map(e -> e.getKey() + "=" + e.getValue().stream().map(v -> v.value() + ";" + v.signature()).collect(Collectors.joining(";;;"))).collect(Collectors.joining("/"))).collect(Collectors.joining(", ")));
+                            + p.profile().getProperties().asMap().entrySet().stream().map(e -> e.getKey() + "=" + e.getValue().stream().map(v -> v.getValue() + ";" + v.getSignature()).collect(Collectors.joining(";;;"))).collect(Collectors.joining("/"))).collect(Collectors.joining(", "))); // Backport - Refactored class
         }
         else {
             doPacketOutput("Packet: " + packet.getClass().getCanonicalName() + " sent to " + player.getScoreboardName());
@@ -285,11 +312,15 @@ public class DenizenNetworkManagerImpl extends Connection {
 
     @Override
     public void send(Packet<?> packet, PacketSendListener genericfuturelistener) {
+    // Backport start - Newer methods do not exist in MC 1.20.1
+    /*
         send(packet, genericfuturelistener, true);
     }
 
     @Override
     public void send(Packet<?> packet, @Nullable PacketSendListener genericfuturelistener, boolean flush) {
+    */
+    // Backport end
         if (!Bukkit.isPrimaryThread()) {
             if (Settings.cache_warnOnAsyncPackets
                     && !(packet instanceof ClientboundSystemChatPacket) && !(packet instanceof ClientboundPlayerChatPacket) // Vanilla supports an async chat system, though it's normally disabled, some plugins use this as justification for sending messages async
@@ -303,7 +334,7 @@ public class DenizenNetworkManagerImpl extends Connection {
                     Debug.echoError(ex);
                 }
             }
-            oldManager.send(packet, genericfuturelistener, flush);
+            oldManager.send(packet, genericfuturelistener/*, flush*/); // Backport - Newer methods do not exist in MC 1.20.1
             return;
         }
         if (NMSHandler.debugPackets) {
@@ -311,11 +342,17 @@ public class DenizenNetworkManagerImpl extends Connection {
         }
         packetsSent++;
         if (packet instanceof ClientboundBundlePacket bundlePacket) {
-            List<Packet<? super ClientGamePacketListener>> processedPackets = new ArrayList<>();
+            // Backport start - Rewrite bundle packet processing logic
+            //List<Packet<? super ClientGamePacketListener>> processedPackets = new ArrayList<>();
+            List<Packet<ClientGamePacketListener>> processedPackets = new ArrayList<>();
             boolean anyChange = false;
+            /*
             for (Packet<? super ClientGamePacketListener> _subPacket : bundlePacket.subPackets()) {
                 // Bundle packets with non-game packets shouldn't ever be sent while the Denizen interceptor is active
                 Packet<ClientGamePacketListener> subPacket = (Packet<ClientGamePacketListener>) _subPacket;
+            */
+            for (Packet<ClientGamePacketListener> subPacket : bundlePacket.subPackets()) {
+            // Backport end
                 Packet<ClientGamePacketListener> processed = processPacketHandlersFor(subPacket);
                 anyChange = anyChange || processed != subPacket;
                 if (processed != null) {
@@ -336,9 +373,11 @@ public class DenizenNetworkManagerImpl extends Connection {
             }
             packet = processed;
         }
-        oldManager.send(packet, genericfuturelistener, flush);
+        oldManager.send(packet, genericfuturelistener/*, flush*/); // Backport - Newer methods do not exist in MC 1.20.1
     }
 
+    // Backport start - Newer methods do not exist in MC 1.20.1
+    /*
     @Override
     public void runOnceConnected(Consumer<Connection> consumer) {
         oldManager.runOnceConnected(consumer);
@@ -348,6 +387,8 @@ public class DenizenNetworkManagerImpl extends Connection {
     public void flushChannel() {
         oldManager.flushChannel();
     }
+    */
+    // Backport end
 
     public Packet<ClientGamePacketListener> processPacketHandlersFor(Packet<ClientGamePacketListener> packet) {
         if (packet == null) {
@@ -411,10 +452,14 @@ public class DenizenNetworkManagerImpl extends Connection {
         return oldManager.getRemoteAddress();
     }
 
+    // Backport start - Newer methods do not exist in MC 1.20.1
+    /*
     @Override
     public String getLoggableAddress(boolean flag) {
         return oldManager.getLoggableAddress(flag);
     }
+    */
+    // Backport end
 
     @Override
     public void disconnect(Component ichatbasecomponent) {
@@ -439,10 +484,14 @@ public class DenizenNetworkManagerImpl extends Connection {
         return oldManager.getSending();
     }
 
+    // Backport start - Newer methods do not exist in MC 1.20.1
+    /*
     @Override
     public void configurePacketHandler(ChannelPipeline channelpipeline) {
         oldManager.configurePacketHandler(channelpipeline);
     }
+    */
+    // Backport end
 
     @Override
     public void setEncryptionKey(Cipher cipher, Cipher cipher1) {
@@ -504,9 +553,15 @@ public class DenizenNetworkManagerImpl extends Connection {
     ///////////
 
     private static final Field protocolDirectionField = ReflectionHelper.getFields(Connection.class).get(ReflectionMappingsInfo.Connection_receiving, PacketFlow.class);
+    // Backport start - Networking code was split out in MC 1.20.6 but not in MC 1.20.1
+    /*
     public static final Field Connection_packetListener = ReflectionHelper.getFields(Connection.class).get(ReflectionMappingsInfo.Connection_packetListener, PacketListener.class);
     private static final Field ServerGamePacketListener_ConnectionField = ReflectionHelper.getFields(ServerCommonPacketListenerImpl.class).get(ReflectionMappingsInfo.ServerCommonPacketListenerImpl_connection);
     private static final MethodHandle ServerGamePacketListener_ConnectionSetter = ReflectionHelper.getFinalSetter(ServerCommonPacketListenerImpl.class, ReflectionMappingsInfo.ServerCommonPacketListenerImpl_connection);
+    */
+    private static final Field ServerGamePacketListener_ConnectionField = ReflectionHelper.getFields(ServerGamePacketListenerImpl.class).get(ReflectionMappingsInfo.ServerGamePacketListenerImpl_connection);
+    private static final MethodHandle ServerGamePacketListener_ConnectionSetter = ReflectionHelper.getFinalSetter(ServerGamePacketListenerImpl.class, ReflectionMappingsInfo.ServerGamePacketListenerImpl_connection);
+    // Backport end
 
     private static PacketFlow getProtocolDirection(Connection networkManager) {
         PacketFlow direction = null;
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/DenizenPacketListenerImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/DenizenPacketListenerImpl.java
index 229f0ff3f4f172d1353276f3055d7fe020cdeb6c..0d371b1a4bd564de3c331e6167cc0c7b92d4e90a 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/DenizenPacketListenerImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/DenizenPacketListenerImpl.java
@@ -12,11 +12,15 @@ import com.denizenscript.denizen.utilities.packets.DenizenPacketHandler;
 import com.denizenscript.denizencore.utilities.debugging.Debug;
 import net.minecraft.core.BlockPos;
 import net.minecraft.network.protocol.Packet;
+// Backport start - Packets was moved in 1.20.6 but not in 1.20.1
+/*
 import net.minecraft.network.protocol.common.ServerboundCustomPayloadPacket;
 import net.minecraft.network.protocol.common.ServerboundResourcePackPacket;
+*/
+// Backport end
 import net.minecraft.network.protocol.game.*;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.network.CommonListenerCookie;
+//import net.minecraft.server.network.CommonListenerCookie; // Backport - Cookie does not exist in MC 1.20.1
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.v1_20_R1.block.CraftBlock;
 import org.bukkit.event.block.SignChangeEvent;
@@ -28,7 +32,7 @@ public class DenizenPacketListenerImpl extends AbstractListenerPlayInImpl {
     public BlockPos fakeSignExpected;
 
     public DenizenPacketListenerImpl(DenizenNetworkManagerImpl networkManager, ServerPlayer entityPlayer) {
-        super(networkManager, entityPlayer, entityPlayer.connection, new CommonListenerCookie(entityPlayer.getGameProfile(), entityPlayer.connection.latency(), entityPlayer.clientInformation(), entityPlayer.connection.isTransferred()));
+        super(networkManager, entityPlayer, entityPlayer.connection/*, new CommonListenerCookie(entityPlayer.getGameProfile(), entityPlayer.connection.latency(), entityPlayer.clientInformation(), entityPlayer.connection.isTransferred())*/);
     }
 
     @Override
@@ -88,7 +92,7 @@ public class DenizenPacketListenerImpl extends AbstractListenerPlayInImpl {
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket packet) {
         if (NMSHandler.debugPackets) {
-            Debug.log("Custom packet payload: " + packet.payload().type().id().toString() + " sent from " + player.getScoreboardName());
+            Debug.log("Custom packet payload: " + packet./*payload().type().id()*/getIdentifier().toString() + " sent from " + player.getScoreboardName()); // Backport - Refactored class
         }
         super.handleCustomPayload(packet);
     }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/FakeBlockHelper.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/FakeBlockHelper.java
index 1cb5f2a3ba0a362193e499e9957fbb77e69989f8..087b29099244b4bfaf9b58f606585b4fad82466d 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/FakeBlockHelper.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/FakeBlockHelper.java
@@ -11,7 +11,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.RegistryFriendlyByteBuf;
+//import net.minecraft.network.RegistryFriendlyByteBuf; // Backport - This does not exist in MC 1.20.1
 import net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
 import net.minecraft.world.level.biome.Biome;
@@ -90,9 +90,15 @@ public class FakeBlockHelper {
 
     public static ClientboundLevelChunkWithLightPacket handleMapChunkPacket(World world, ClientboundLevelChunkWithLightPacket originalPacket, int chunkX, int chunkZ, List<FakeBlock> blocks) {
         try {
-            ClientboundLevelChunkWithLightPacket duplicateCorePacket = ClientboundLevelChunkWithLightPacket.STREAM_CODEC.decode(DenizenNetworkManagerImpl.copyPacket(originalPacket, ClientboundLevelChunkWithLightPacket.STREAM_CODEC));
+            // Backport start - StreamCodec does not exist in MC 1.20.1
+//            ClientboundLevelChunkWithLightPacket duplicateCorePacket = ClientboundLevelChunkWithLightPacket.STREAM_CODEC.decode(DenizenNetworkManagerImpl.copyPacket(originalPacket, ClientboundLevelChunkWithLightPacket.STREAM_CODEC));
+            ClientboundLevelChunkWithLightPacket duplicateCorePacket = new ClientboundLevelChunkWithLightPacket(DenizenNetworkManagerImpl.copyPacket(originalPacket));
+            // Backport end
             copyPacketPaperPatch(duplicateCorePacket, originalPacket);
-            RegistryFriendlyByteBuf copier = new RegistryFriendlyByteBuf(Unpooled.buffer(), CraftRegistry.getMinecraftRegistry());
+            // Backport start - RegistryFriendlyByteBuf does not exist in MC 1.20.1
+//            RegistryFriendlyByteBuf copier = new RegistryFriendlyByteBuf(Unpooled.buffer(), CraftRegistry.getMinecraftRegistry());
+            FriendlyByteBuf copier = new FriendlyByteBuf(Unpooled.buffer());
+            // Backport end
             originalPacket.getChunkData().write(copier);
             ClientboundLevelChunkPacketData packet = new ClientboundLevelChunkPacketData(copier, chunkX, chunkZ);
             FriendlyByteBuf serial = originalPacket.getChunkData().getReadBuffer();
@@ -109,7 +115,7 @@ public class FakeBlockHelper {
                     LocationTag loc = block.location;
                     if (loc.getBlockX() == x && loc.getBlockY() == y && loc.getBlockZ() == z && block.material != null) {
                         BlockEntity newBlockEnt = CraftBlockStates.createNewTileEntity(block.material.getMaterial());
-                        Object newData = CHUNKDATA_BLOCK_ENTITY_CONSTRUCTOR.invoke(xz, y, newBlockEnt.getType(), newBlockEnt.getUpdateTag(CraftRegistry.getMinecraftRegistry()));
+                        Object newData = CHUNKDATA_BLOCK_ENTITY_CONSTRUCTOR.invoke(xz, y, newBlockEnt.getType(), newBlockEnt.getUpdateTag(/*CraftRegistry.getMinecraftRegistry()*/)); // Backport - Different arguments in different MC version
                         blockEntities.set(i, newData);
                         break;
                     }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/ActionBarEventPacketHandlers.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/ActionBarEventPacketHandlers.java
index 9506dd8376e7862534f122a6dd412b892497a959..32663746d08356e21cd54991d68e68f3170f3e03 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/ActionBarEventPacketHandlers.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/ActionBarEventPacketHandlers.java
@@ -22,7 +22,7 @@ public class ActionBarEventPacketHandlers {
             return actionbarPacket;
         }
         event.reset();
-        Component actionbarText = actionbarPacket.text();
+        Component actionbarText = actionbarPacket.getText(); // Backport - Refactored class
         event.message = new ElementTag(FormattedTextHelper.stringify(Handler.componentToSpigot(actionbarText)), true);
         event.rawJson = new ElementTag(CraftChatMessage.toJSON(actionbarText), true);
         event.system = new ElementTag(false);
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/AttachPacketHandlers.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/AttachPacketHandlers.java
index 2521e535f8672d5365775c07dbc012c0fbe398f6..759e3e0b7660d9a1b23f2d55fd30e1363e8a60fe 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/AttachPacketHandlers.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/AttachPacketHandlers.java
@@ -181,7 +181,7 @@ public class AttachPacketHandlers {
             for (EntityAttachmentHelper.PlayerAttachMap attMap : attList.attachedToMap.values()) {
                 EntityAttachmentHelper.AttachmentData att = attMap.getAttachment(networkManager.player.getUUID());
                 if (attMap.attached.isValid() && att != null) {
-                    ClientboundSetEntityMotionPacket pNew = ClientboundSetEntityMotionPacket.STREAM_CODEC.decode(DenizenNetworkManagerImpl.copyPacket(packet, ClientboundSetEntityMotionPacket.STREAM_CODEC));
+                    ClientboundSetEntityMotionPacket pNew = new ClientboundSetEntityMotionPacket/*.STREAM_CODEC.decode*/(DenizenNetworkManagerImpl.copyPacket(packet/*, ClientboundSetEntityMotionPacket.STREAM_CODEC*/)); // Backport - StreamCodec does not exist in MC 1.20.1
                     ENTITY_ID_PACKVELENT.setInt(pNew, att.attached.getBukkitEntity().getEntityId());
                     if (NMSHandler.debugPackets) {
                         DenizenNetworkManagerImpl.doPacketOutput("Attach Velocity Packet: " + pNew.getClass().getCanonicalName() + " for " + att.attached.getUUID() + " sent to " + networkManager.player.getScoreboardName());
@@ -203,7 +203,7 @@ public class AttachPacketHandlers {
             for (EntityAttachmentHelper.PlayerAttachMap attMap : attList.attachedToMap.values()) {
                 EntityAttachmentHelper.AttachmentData att = attMap.getAttachment(networkManager.player.getUUID());
                 if (attMap.attached.isValid() && att != null) {
-                    ClientboundTeleportEntityPacket pNew = ClientboundTeleportEntityPacket.STREAM_CODEC.decode(DenizenNetworkManagerImpl.copyPacket(packet, ClientboundTeleportEntityPacket.STREAM_CODEC));
+                    ClientboundTeleportEntityPacket pNew = new ClientboundTeleportEntityPacket/*.STREAM_CODEC.decode*/(DenizenNetworkManagerImpl.copyPacket(packet/*, ClientboundTeleportEntityPacket.STREAM_CODEC*/)); // Backport - StreamCodec does not exist in MC 1.20.1
                     ENTITY_ID_PACKTELENT.setInt(pNew, att.attached.getBukkitEntity().getEntityId());
                     Vector resultPos = new Vector(POS_X_PACKTELENT.getDouble(pNew), POS_Y_PACKTELENT.getDouble(pNew), POS_Z_PACKTELENT.getDouble(pNew)).add(relative);
                     if (att.positionalOffset != null) {
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/DisguisePacketHandlers.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/DisguisePacketHandlers.java
index 8ea27dc8b2a99a0b44039fb4551bdd21ce82531a..801602abc568c78b457037a272edd6cbc6887ea8 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/DisguisePacketHandlers.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/DisguisePacketHandlers.java
@@ -114,7 +114,10 @@ public class DisguisePacketHandlers {
 
     public static ClientboundTeleportEntityPacket processTeleportPacket(DenizenNetworkManagerImpl networkManager, ClientboundTeleportEntityPacket teleportEntityPacket, DisguiseCommand.TrackedDisguise disguise) throws IllegalAccessException {
         if (disguise.as.getBukkitEntityType() == EntityType.ENDER_DRAGON) {
-            ClientboundTeleportEntityPacket pNew = ClientboundTeleportEntityPacket.STREAM_CODEC.decode(DenizenNetworkManagerImpl.copyPacket(teleportEntityPacket, ClientboundTeleportEntityPacket.STREAM_CODEC));
+            // Backport start - Rewrite packet copy logic
+//            ClientboundTeleportEntityPacket pNew = ClientboundTeleportEntityPacket.STREAM_CODEC.decode(DenizenNetworkManagerImpl.copyPacket(teleportEntityPacket, ClientboundTeleportEntityPacket.STREAM_CODEC));
+            ClientboundTeleportEntityPacket pNew = new ClientboundTeleportEntityPacket(DenizenNetworkManagerImpl.copyPacket(teleportEntityPacket));
+            // Backport end
             TELEPORT_PACKET_YAW.setByte(pNew, EntityAttachmentHelper.adaptedCompressedAngle(teleportEntityPacket.getyRot(), 180));
             return pNew;
         }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/FakeBlocksPacketHandlers.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/FakeBlocksPacketHandlers.java
index 49b1c856f5322c9178e10497ed62607e8a5a7d7e..a11e1e309fc717c4b293f39cdb96f0042fd1d271 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/FakeBlocksPacketHandlers.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/FakeBlocksPacketHandlers.java
@@ -60,7 +60,10 @@ public class FakeBlocksPacketHandlers {
                 if (!map.byChunk.containsKey(coordinateDenizen)) {
                     return packet;
                 }
-                ClientboundSectionBlocksUpdatePacket newPacket = ClientboundSectionBlocksUpdatePacket.STREAM_CODEC.decode(DenizenNetworkManagerImpl.copyPacket((ClientboundSectionBlocksUpdatePacket) packet, ClientboundSectionBlocksUpdatePacket.STREAM_CODEC));
+                // Backport start - Rewrite packet copy logic
+//                ClientboundSectionBlocksUpdatePacket newPacket = ClientboundSectionBlocksUpdatePacket.STREAM_CODEC.decode(DenizenNetworkManagerImpl.copyPacket((ClientboundSectionBlocksUpdatePacket) packet, ClientboundSectionBlocksUpdatePacket.STREAM_CODEC));
+                ClientboundSectionBlocksUpdatePacket newPacket = new ClientboundSectionBlocksUpdatePacket(DenizenNetworkManagerImpl.copyPacket(packet));
+                // Backport end
                 LocationTag location = new LocationTag(networkManager.player.level().getWorld(), 0, 0, 0);
                 short[] originalOffsetArray = (short[])OFFSETARRAY_MULTIBLOCKCHANGE.get(newPacket);
                 BlockState[] originalDataArray = (BlockState[])BLOCKARRAY_MULTIBLOCKCHANGE.get(newPacket);
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/FakeEquipmentPacketHandlers.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/FakeEquipmentPacketHandlers.java
index 47e11235949b6ca9a4c53c55b467834c6a5cc33f..c31a5651b495818bb0dbb6804031a718592fa48b 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/FakeEquipmentPacketHandlers.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/FakeEquipmentPacketHandlers.java
@@ -48,7 +48,8 @@ public class FakeEquipmentPacketHandlers {
                 case HEAD -> override.head == null ? pair.getSecond() : CraftItemStack.asNMSCopy(override.head.getItemStack());
                 case LEGS -> override.legs == null ? pair.getSecond() : CraftItemStack.asNMSCopy(override.legs.getItemStack());
                 case FEET -> override.boots == null ? pair.getSecond() : CraftItemStack.asNMSCopy(override.boots.getItemStack());
-                case BODY -> pair.getSecond(); // TODO: 1.20.6: is this actually used here? do we want to allow overriding it?
+                // Backport - This enum constant does not exist in MC 1.20.1
+//                case BODY -> pair.getSecond(); // TODO: 1.20.6: is this actually used here? do we want to allow overriding it?
             };
             equipment.set(i, new Pair<>(pair.getFirst(), use));
         }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/HideParticlesPacketHandlers.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/HideParticlesPacketHandlers.java
index 878dbb1b89610a7ad8bb319ec9fad6134b2a6f32..7800b31c1c44a342d2065d53bcd58a84155f0265 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/HideParticlesPacketHandlers.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/HideParticlesPacketHandlers.java
@@ -22,7 +22,7 @@ public class HideParticlesPacketHandlers {
         if (hidden == null) {
             return particlesPacket;
         }
-        Particle bukkitParticle = CraftParticle.minecraftToBukkit(particlesPacket.getParticle().getType());
+        Particle bukkitParticle = CraftParticle./*minecraftToBukkit*/toBukkit(particlesPacket.getParticle().getType()); // Backport - Renamed method
         if (hidden.contains(bukkitParticle)) {
             return null;
         }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/TablistUpdateEventPacketHandlers.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/TablistUpdateEventPacketHandlers.java
index 41695a47a6ca114bfdc5b88b579a3e4d6a16ab05..a4197261758ba9666e8fb673c85a22adf6531159 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/TablistUpdateEventPacketHandlers.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/handlers/packet/TablistUpdateEventPacketHandlers.java
@@ -75,8 +75,10 @@ public class TablistUpdateEventPacketHandlers {
                 String texture = null, signature = null;
                 if (profile.getProperties().containsKey("textures")) {
                     Property property = profile.getProperties().get("textures").stream().findFirst().get();
-                    texture = property.value();
-                    signature = property.signature();
+                    // Backport start - Refactored class
+                    texture = property.getValue();
+                    signature = property.getSignature();
+                    // Backport end
                 }
                 String modeText = update.gameMode() == null ? null : update.gameMode().name();
                 PlayerReceivesTablistUpdateScriptEvent.TabPacketData data = new PlayerReceivesTablistUpdateScriptEvent.TabPacketData(mode, profile.getId(), update.listed(), profile.getName(),
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/packets/PacketInResourcePackStatusImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/packets/PacketInResourcePackStatusImpl.java
index 1cfdc67205b670ea2af88256893744fdb83dcd60..83345caa51190f8954c0616e10c52fc88435c692 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/packets/PacketInResourcePackStatusImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/packets/PacketInResourcePackStatusImpl.java
@@ -1,7 +1,7 @@
 package com.denizenscript.denizen.nms.v1_20.impl.network.packets;
 
 import com.denizenscript.denizen.nms.interfaces.packets.PacketInResourcePackStatus;
-import net.minecraft.network.protocol.common.ServerboundResourcePackPacket;
+import net.minecraft.network.protocol.game.ServerboundResourcePackPacket; // Backport - Packets was moved in MC 1.20.6 but not 1.20.1
 
 public class PacketInResourcePackStatusImpl implements PacketInResourcePackStatus {
 
@@ -13,6 +13,6 @@ public class PacketInResourcePackStatusImpl implements PacketInResourcePackStatu
 
     @Override
     public String getStatus() {
-        return internal.action().name();
+        return internal.action/*()*/.name(); // Backport - Refactored class
     }
 }
diff --git a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/packets/PacketOutChatImpl.java b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/packets/PacketOutChatImpl.java
index e4dd9c036fd33d36bba57e150e70d0d54e3396da..01467a1321b237d1b59e348e4882d02eeac36f7d 100644
--- a/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/packets/PacketOutChatImpl.java
+++ b/v1_20/src/main/java/com/denizenscript/denizen/nms/v1_20/impl/network/packets/PacketOutChatImpl.java
@@ -24,7 +24,10 @@ public class PacketOutChatImpl extends PacketOutChat {
 
     public PacketOutChatImpl(ClientboundSystemChatPacket internal) {
         systemPacket = internal;
-        rawJson = CraftChatMessage.toJSON(internal.content());
+        // Backport start - Packets related to chat got changed in newer MC version
+//        rawJson = CraftChatMessage.toJSON(internal.content());
+        rawJson = internal.content();
+        // Backport end
         if (rawJson == null && convertComponentToJsonString != null) {
             try {
                 if (paperTextField == null) {
